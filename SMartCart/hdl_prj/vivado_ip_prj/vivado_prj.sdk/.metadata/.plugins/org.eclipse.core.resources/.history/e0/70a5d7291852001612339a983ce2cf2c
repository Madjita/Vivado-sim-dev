/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xscugic.h"
#include "type_data.h"
#include "sleep.h"
#include "xil_types.h"
#include "xil_exception.h"
#include "xplatform_info.h"
#include "xil_exception.h"


typedef ProgSmartCart;
XScuGic InterruptController;
void SetSmartCart();
int ScuGicInterrupt_Init(u16 DeviceId,ProgSmartCart *pProgSmartCart);
int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr);

//-----------------------------------------------------
void rst_interrypt(void);
//-----------------------------------------------------
int baseaddr=0x400d0000;
void SetSmartCart()
{
	int status;
	Ccomanda ccomanda;
	status=Xil_In32(baseaddr+0x148);
	if(status==1)
	{
			reciver_buffer[index_rec_buff]=Xil_In32(XPAR_HEAD_IP_0_BASEADDR+0x128);
			Xil_Out32(XPAR_HEAD_IP_0_BASEADDR+0x100, 4101);
		    Xil_Out32(XPAR_HEAD_IP_0_BASEADDR+0x100, 131077);
			invert_byte(&reciver_buffer[index_rec_buff]);
			index_rec_buff++;
			if(index_rec_buff==21){Xil_Out32(baseaddr+0x124,10316);};

	}
	if(status==2)
	{
		Xil_Out32(baseaddr+0x100, 4101);
		Xil_Out32(XPAR_HEAD_IP_0_BASEADDR+0x100, 131077);
		//ok=2;
		return;
	}
	if(status==3)
	{
		Xil_Out32(XPAR_HEAD_IP_0_BASEADDR+0x100, 4101);
		index_rec_buff=0;
		ok=1;
		return;
	}

}

int main()
{
    init_platform();
    int statusReg;
    int a;
    //-----------------
    ok=0;
    index_rec_buff=0;
    //----------------

    cInfoSmartcard cinfosmartcard;
    ProgSmartCart pProgSmartCart;
    Ccomanda ccomanda;

    CleancInfoSmartcard(&cinfosmartcard);
    statusReg=ScuGicInterrupt_Init(0,&pProgSmartCart);
    Xil_Out32(baseaddr+0x4,0x1);
    Xil_Out32(baseaddr+0x124,5000000);

    Xil_Out32(baseaddr+0x14C,2604);
    Xil_Out32(baseaddr+0x150,223);
    Xil_Out32(baseaddr+0x154,223);


    start(&ccomanda);
    //InicialSmartCard(&cinfosmartcard);
    while(ok==0){}
    ok=0;
   // Xil_Out32(baseaddr+0x14C,223);
  //  Xil_Out32(baseaddr+0x150,447);
  //  Xil_Out32(baseaddr+0x154,447);
    Xil_Out32(baseaddr+0x104,0xA0);
    Xil_Out32(baseaddr+0x108,0xA4);
    Xil_Out32(baseaddr+0x10C,0x00);
    Xil_Out32(baseaddr+0x110,0x00);
    Xil_Out32(baseaddr+0x114,0x02);
    a=0xff^0x10^0x96;

    //Xil_Out32(baseaddr+0x114,0xB0);
   // Xil_Out32(baseaddr+0x118,0xF8);
    write_byte(&ccomanda,4);
    //Xil_Out32(XPAR_HEAD_IP_0_BASEADDR+0x100, 131077);
    while(ok==0){}
    ok=0;
    while(1)
    {
    	a++;
    }
    cleanup_platform();
    return 0;
}

int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr)
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler) XScuGic_InterruptHandler,
	XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}


int ScuGicInterrupt_Init(u16 DeviceId,ProgSmartCart *pProgSmartCart)
{
	int Status;
	XScuGic_Config *GicConfig;
	GicConfig = XScuGic_LookupConfig(DeviceId);
	if (NULL == GicConfig) {
	return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig, GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}
	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}
	//---схема управления
	Status = XScuGic_Connect(&InterruptController,61,SetSmartCart,pProgSmartCart);
	if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
	XScuGic_Enable(&InterruptController, 61);
 	return XST_SUCCESS;

}


