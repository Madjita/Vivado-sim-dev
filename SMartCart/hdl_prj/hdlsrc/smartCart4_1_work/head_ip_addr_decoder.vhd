-- -------------------------------------------------------------
-- 
-- File Name: D:\Matlab_Vhd\smartCart\OTLADKA\hdlsrc\smartCart4_1_work\head_ip_addr_decoder.vhd
-- Created: 2016-07-21 09:50:09
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_addr_decoder
-- Source Path: head_ip/head_ip_axi_lite/head_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_Out1                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out2                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out3                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out4                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out5                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out6                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out7                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out8                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_status                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_comanda                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_1                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_2                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_3                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_4                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_5                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_6                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_7                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_8                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END head_ip_addr_decoder;


ARCHITECTURE rtl OF head_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_Out1                  : std_logic;  -- ufix1
  SIGNAL read_Out1_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_Out2_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out3_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out4_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out5_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out6_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out7_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out8_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_status_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_status                : std_logic;  -- ufix1
  SIGNAL decode_sel_Out8                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out7                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out6                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out5                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out4                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out3                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out2                  : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out1                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out2                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out3                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out3                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out4                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out4                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out4                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out5                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out5                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out5                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out6                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out6                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out7                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out7                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out7                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out8                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out8                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out8                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_status                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_status                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_comanda               : std_logic;  -- ufix1
  SIGNAL reg_enb_comanda                  : std_logic;  -- ufix1
  SIGNAL write_reg_comanda                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_1                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_2             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_2                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_2              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_3             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_3                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_3              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_4             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_4                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_4              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_5             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_5                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_5              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_6             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_6                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_6              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_7             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_7                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_7              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_8             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_8                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_8              : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_Out1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  read_Out1_unsigned <= unsigned(read_Out1);

  const_1 <= '1';

  enb <= const_1;

  read_Out2_unsigned <= unsigned(read_Out2);

  read_Out3_unsigned <= unsigned(read_Out3);

  read_Out4_unsigned <= unsigned(read_Out4);

  read_Out5_unsigned <= unsigned(read_Out5);

  read_Out6_unsigned <= unsigned(read_Out6);

  read_Out7_unsigned <= unsigned(read_Out7);

  read_Out8_unsigned <= unsigned(read_Out8);

  read_status_unsigned <= unsigned(read_status);

  
  decode_sel_status <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  
  decode_sel_Out8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  
  decode_sel_Out7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  
  decode_sel_Out6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  
  decode_sel_Out5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  
  decode_sel_Out4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  
  decode_sel_Out3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  
  decode_sel_Out2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_Out1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out1 <= read_Out1_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out1_process;


  data_in_Out1 <= resize(read_reg_Out1, 32);

  
  decode_rd_Out1 <= const_0 WHEN decode_sel_Out1 = '0' ELSE
      data_in_Out1;

  reg_Out2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out2 <= read_Out2_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out2_process;


  data_in_Out2 <= resize(read_reg_Out2, 32);

  
  decode_rd_Out2 <= decode_rd_Out1 WHEN decode_sel_Out2 = '0' ELSE
      data_in_Out2;

  reg_Out3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out3 <= read_Out3_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out3_process;


  data_in_Out3 <= resize(read_reg_Out3, 32);

  
  decode_rd_Out3 <= decode_rd_Out2 WHEN decode_sel_Out3 = '0' ELSE
      data_in_Out3;

  reg_Out4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out4 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out4 <= read_Out4_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out4_process;


  data_in_Out4 <= resize(read_reg_Out4, 32);

  
  decode_rd_Out4 <= decode_rd_Out3 WHEN decode_sel_Out4 = '0' ELSE
      data_in_Out4;

  reg_Out5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out5 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out5 <= read_Out5_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out5_process;


  data_in_Out5 <= resize(read_reg_Out5, 32);

  
  decode_rd_Out5 <= decode_rd_Out4 WHEN decode_sel_Out5 = '0' ELSE
      data_in_Out5;

  reg_Out6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out6 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out6 <= read_Out6_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out6_process;


  data_in_Out6 <= resize(read_reg_Out6, 32);

  
  decode_rd_Out6 <= decode_rd_Out5 WHEN decode_sel_Out6 = '0' ELSE
      data_in_Out6;

  reg_Out7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out7 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out7 <= read_Out7_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out7_process;


  data_in_Out7 <= resize(read_reg_Out7, 32);

  
  decode_rd_Out7 <= decode_rd_Out6 WHEN decode_sel_Out7 = '0' ELSE
      data_in_Out7;

  reg_Out8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out8 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out8 <= read_Out8_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out8_process;


  data_in_Out8 <= resize(read_reg_Out8, 32);

  
  decode_rd_Out8 <= decode_rd_Out7 WHEN decode_sel_Out8 = '0' ELSE
      data_in_Out8;

  reg_status_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_status <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_status <= read_status_unsigned;
      END IF;
    END IF;
  END PROCESS reg_status_process;


  
  decode_rd_status <= decode_rd_Out8 WHEN decode_sel_status = '0' ELSE
      read_reg_status;

  data_read <= std_logic_vector(decode_rd_status);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_comanda <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_comanda <= decode_sel_comanda AND wr_enb;

  reg_comanda_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_comanda <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_comanda = '1' THEN
        write_reg_comanda <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_comanda_process;


  write_comanda <= std_logic_vector(write_reg_comanda);

  
  decode_sel_data_in_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_data_in_1 <= decode_sel_data_in_1 AND wr_enb;

  reg_data_in_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_1 = '1' THEN
        write_reg_data_in_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_1_process;


  write_data_in_1 <= std_logic_vector(write_reg_data_in_1);

  
  decode_sel_data_in_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_data_in_2 <= decode_sel_data_in_2 AND wr_enb;

  reg_data_in_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_2 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_2 = '1' THEN
        write_reg_data_in_2 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_2_process;


  write_data_in_2 <= std_logic_vector(write_reg_data_in_2);

  
  decode_sel_data_in_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_data_in_3 <= decode_sel_data_in_3 AND wr_enb;

  reg_data_in_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_3 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_3 = '1' THEN
        write_reg_data_in_3 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_3_process;


  write_data_in_3 <= std_logic_vector(write_reg_data_in_3);

  
  decode_sel_data_in_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_data_in_4 <= decode_sel_data_in_4 AND wr_enb;

  reg_data_in_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_4 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_4 = '1' THEN
        write_reg_data_in_4 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_4_process;


  write_data_in_4 <= std_logic_vector(write_reg_data_in_4);

  
  decode_sel_data_in_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_data_in_5 <= decode_sel_data_in_5 AND wr_enb;

  reg_data_in_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_5 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_5 = '1' THEN
        write_reg_data_in_5 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_5_process;


  write_data_in_5 <= std_logic_vector(write_reg_data_in_5);

  
  decode_sel_data_in_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_data_in_6 <= decode_sel_data_in_6 AND wr_enb;

  reg_data_in_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_6 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_6 = '1' THEN
        write_reg_data_in_6 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_6_process;


  write_data_in_6 <= std_logic_vector(write_reg_data_in_6);

  
  decode_sel_data_in_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_data_in_7 <= decode_sel_data_in_7 AND wr_enb;

  reg_data_in_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_7 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_7 = '1' THEN
        write_reg_data_in_7 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_7_process;


  write_data_in_7 <= std_logic_vector(write_reg_data_in_7);

  
  decode_sel_data_in_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_data_in_8 <= decode_sel_data_in_8 AND wr_enb;

  reg_data_in_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_8 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_8 = '1' THEN
        write_reg_data_in_8 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_8_process;


  write_data_in_8 <= std_logic_vector(write_reg_data_in_8);

END rtl;

