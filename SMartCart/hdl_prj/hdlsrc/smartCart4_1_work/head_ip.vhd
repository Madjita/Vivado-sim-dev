-- -------------------------------------------------------------
-- 
-- File Name: D:\Matlab_Vhd\smartCart\OTLADKA\hdlsrc\smartCart4_1_work\head_ip.vhd
-- Created: 2016-07-21 09:50:09
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip
-- Source Path: head_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        IO                                :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        irq                               :   OUT   std_logic;  -- ufix1
        trans_io                          :   OUT   std_logic;  -- ufix1
        switch_io                         :   OUT   std_logic;  -- ufix1
        PmodJA1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        PmodJB1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END head_ip;


ARCHITECTURE rtl OF head_ip IS

  -- Component Declarations
  COMPONENT head_ip_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_Out1                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out2                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out3                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out4                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out5                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out6                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out7                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_Out8                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          read_status                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_comanda                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_1                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_2                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_3                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_4                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_5                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_6                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_7                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_data_in_8                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT head_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          comanda                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          IO                              :   IN    std_logic;  -- ufix1
          data_in_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_4                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_5                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_6                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_7                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_8                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          signals                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
          I0_OUT                          :   OUT   std_logic;  -- ufix1
          strob                           :   OUT   std_logic;  -- ufix1
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out2                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out3                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out4                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out5                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out6                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out7                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out8                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          irq                             :   OUT   std_logic;  -- ufix1
          status                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          trans_io                        :   OUT   std_logic;  -- ufix1
          switch_io                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : head_ip_axi_lite
    USE ENTITY work.head_ip_axi_lite(rtl);

  FOR ALL : head_ip_dut
    USE ENTITY work.head_ip_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL Out1_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out2_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out3_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out4_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out5_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out6_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out7_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out8_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL status_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_comanda                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_4                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_5                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_6                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_7                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_data_in_8                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL signals_sig                      : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL I0_OUT_sig                       : std_logic;  -- ufix1
  SIGNAL strob_sig                        : std_logic;  -- ufix1
  SIGNAL irq_sig                          : std_logic;  -- ufix1
  SIGNAL trans_io_sig                     : std_logic;  -- ufix1
  SIGNAL switch_io_sig                    : std_logic;  -- ufix1
  SIGNAL const_zero                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL signals_sig_signed               : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL PmodJA1_tmp                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL const_zero_1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL const_zero_2                     : std_logic;  -- ufix1
  SIGNAL PmodJB1_tmp                      : unsigned(7 DOWNTO 0);  -- ufix8

BEGIN
  u_head_ip_axi_lite_inst : head_ip_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_Out1 => Out1_sig,  -- ufix8
              read_Out2 => Out2_sig,  -- ufix8
              read_Out3 => Out3_sig,  -- ufix8
              read_Out4 => Out4_sig,  -- ufix8
              read_Out5 => Out5_sig,  -- ufix8
              read_Out6 => Out6_sig,  -- ufix8
              read_Out7 => Out7_sig,  -- ufix8
              read_Out8 => Out8_sig,  -- ufix8
              read_status => status_sig,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_comanda => write_comanda,  -- ufix32
              write_data_in_1 => write_data_in_1,  -- ufix32
              write_data_in_2 => write_data_in_2,  -- ufix32
              write_data_in_3 => write_data_in_3,  -- ufix32
              write_data_in_4 => write_data_in_4,  -- ufix32
              write_data_in_5 => write_data_in_5,  -- ufix32
              write_data_in_6 => write_data_in_6,  -- ufix32
              write_data_in_7 => write_data_in_7,  -- ufix32
              write_data_in_8 => write_data_in_8,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_head_ip_dut_inst : head_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              comanda => write_comanda,  -- ufix32
              IO => IO,  -- ufix1
              data_in_1 => write_data_in_1,  -- ufix32
              data_in_2 => write_data_in_2,  -- ufix32
              data_in_3 => write_data_in_3,  -- ufix32
              data_in_4 => write_data_in_4,  -- ufix32
              data_in_5 => write_data_in_5,  -- ufix32
              data_in_6 => write_data_in_6,  -- ufix32
              data_in_7 => write_data_in_7,  -- ufix32
              data_in_8 => write_data_in_8,  -- ufix32
              ce_out => ce_out_sig,  -- ufix1
              signals => signals_sig,  -- sfix4
              I0_OUT => I0_OUT_sig,  -- ufix1
              strob => strob_sig,  -- ufix1
              Out1 => Out1_sig,  -- ufix8
              Out2 => Out2_sig,  -- ufix8
              Out3 => Out3_sig,  -- ufix8
              Out4 => Out4_sig,  -- ufix8
              Out5 => Out5_sig,  -- ufix8
              Out6 => Out6_sig,  -- ufix8
              Out7 => Out7_sig,  -- ufix8
              Out8 => Out8_sig,  -- ufix8
              irq => irq_sig,  -- ufix1
              status => status_sig,  -- ufix32
              trans_io => trans_io_sig,  -- ufix1
              switch_io => switch_io_sig  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  const_zero <= to_unsigned(16#0#, 4);

  signals_sig_signed <= signed(signals_sig);

  PmodJA1_tmp <= const_zero & unsigned(signals_sig_signed);

  PmodJA1 <= std_logic_vector(PmodJA1_tmp);

  const_zero_1 <= to_unsigned(16#00#, 5);

  const_zero_2 <= '0';

  PmodJB1_tmp <= const_zero_1 & unsigned'(strob_sig & I0_OUT_sig & const_zero_2);

  PmodJB1 <= std_logic_vector(PmodJB1_tmp);

  irq <= irq_sig;

  trans_io <= trans_io_sig;

  switch_io <= switch_io_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

