-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\smartCart3\head_ip_src_head.vhd
-- Created: 2016-07-12 09:39:09
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- (no clock)    0
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- signals                       ce_out        1
-- I0_OUT                        (no clock)    1.#INF
-- adrOUT                        ce_out        1
-- STATUS                        ce_out        1
-- DataOut                       ce_out        1
-- strob                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_src_head
-- Source Path: smartCart3/head
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_src_head IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        IO                                :   IN    std_logic;
        START                             :   IN    std_logic;
        STOP                              :   IN    std_logic;
        adrRDIN                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        adrIN                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        dataIN                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        signals                           :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
        I0_OUT                            :   OUT   std_logic;
        adrOUT                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        STATUS                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        DataOut                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        strob                             :   OUT   std_logic
        );
END head_ip_src_head;


ARCHITECTURE rtl OF head_ip_src_head IS

  -- Component Declarations
  COMPONENT head_ip_src_Interface
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          IO                              :   IN    std_logic;
          START                           :   IN    std_logic;
          STOP                            :   IN    std_logic;
          signals2                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
          Out3                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT head_ip_src_Reciver
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_const_rate                  :   IN    std_logic;
          RST                             :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          IO                              :   IN    std_logic;
          STOP                            :   IN    std_logic;
          Aadrrd                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          adr_IN                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          data_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          AddrOUT                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          STATUS                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          DataOUT1                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          Strob                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : head_ip_src_Interface
    USE ENTITY work.head_ip_src_Interface(rtl);

  FOR ALL : head_ip_src_Reciver
    USE ENTITY work.head_ip_src_Reciver(rtl);

  -- Signals
  SIGNAL Interface_out1                   : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Interface_out2                   : std_logic;
  SIGNAL Reciver_out1                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Reciver_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Reciver_out3                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Reciver_out4                     : std_logic;

BEGIN
  u_Interface : head_ip_src_Interface
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              IO => IO,
              START => START,
              STOP => STOP,
              signals2 => Interface_out1,  -- sfix4
              Out3 => Interface_out2
              );

  u_Reciver : head_ip_src_Reciver
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              enb_const_rate => clk_enable,
              RST => Interface_out1,  -- sfix4
              IO => IO,
              STOP => STOP,
              Aadrrd => adrRDIN,  -- uint8
              adr_IN => adrIN,  -- uint8
              data_in => dataIN,  -- uint32
              AddrOUT => Reciver_out1,  -- uint8
              STATUS => Reciver_out2,  -- uint32
              DataOUT1 => Reciver_out3,  -- uint8
              Strob => Reciver_out4
              );

  ce_out <= clk_enable;

  signals <= Interface_out1;

  I0_OUT <= Interface_out2;

  adrOUT <= Reciver_out1;

  STATUS <= Reciver_out2;

  DataOut <= Reciver_out3;

  strob <= Reciver_out4;

END rtl;

