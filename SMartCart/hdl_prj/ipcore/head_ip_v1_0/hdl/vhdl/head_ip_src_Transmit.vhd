-- -------------------------------------------------------------
-- 
-- File Name: D:\direct_ip\smart_ip\hdlsrc\smartCart5_1work\head_ip_src_Transmit.vhd
-- Created: 2017-11-07 14:24:49
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_src_Transmit
-- Source Path: smartCart5_1work/head/Transmit
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_src_Transmit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        addrIN                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        dataIN                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        time_recive                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        transmite_on                      :   IN    std_logic;
        DataOUT                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        addrOUT                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        IO                                :   OUT   std_logic
        );
END head_ip_src_Transmit;


ARCHITECTURE rtl OF head_ip_src_Transmit IS

  -- Signals
  SIGNAL addrIN_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL adres_Transmite_out1             : std_logic;
  SIGNAL Def_val_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL dataIN_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL time_recive_unsigned             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch7_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Counter_4_out1                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion2_out1       : std_logic;
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Counter_4_stepreg                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL latch_data_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL START_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1        : std_logic;
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Counter_3_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL latch_data_switch_delay          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL RST_out1                         : std_logic;  -- ufix1
  SIGNAL Def_val6_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Done_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch5_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Def_val3_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch3_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion12_out1      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Def_val5_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL adr_manage_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Def_val4_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch2_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL LOCK_out1                        : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1       : std_logic;
  SIGNAL Def_val2_out1                    : std_logic;
  SIGNAL start_bit_out1                   : std_logic;
  SIGNAL data_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data0_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion4_out1       : std_logic;
  SIGNAL data1_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion5_out1       : std_logic;
  SIGNAL data2_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion6_out1       : std_logic;
  SIGNAL data3_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion7_out1       : std_logic;
  SIGNAL data4_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion8_out1       : std_logic;
  SIGNAL data5_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion9_out1       : std_logic;
  SIGNAL data6_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion10_out1      : std_logic;
  SIGNAL data7_out1                       : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion11_out1      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL Logical_Operator9_out1           : std_logic;
  SIGNAL mux_10_in_1_out1                 : std_logic;
  SIGNAL Switch1_out1                     : std_logic;

BEGIN
  -- —хема формирующа€ отчЄт о работе передатчика (6)
  -- 
  -- —хема формирование последовательности согласно интерфейсу и прин€тых данных (5)
  -- 
  -- ƒетектирование команд, данных (3)
  -- 
  -- —хема удерживани€ данных до сброса (2)
  -- 
  -- —хема  индефикации входных данных (1)
  -- 
  -- —хема синхронизации и управлени€ (4)

  addrIN_unsigned <= unsigned(addrIN);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= addrIN_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  adres_Transmite_out1 <= '1' WHEN Delay1_out1 = to_unsigned(16#02#, 8) ELSE
      '0';

  Def_val_out1 <= to_unsigned(0, 32);

  dataIN_unsigned <= unsigned(dataIN);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= dataIN_unsigned;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch_out1 <= Def_val_out1 WHEN adres_Transmite_out1 = '0' ELSE
      Delay2_out1;

  
  Compare_To_Constant1_out1 <= '1' WHEN Switch_out1 /= to_unsigned(0, 32) ELSE
      '0';

  Constant_out1 <= to_unsigned(1, 32);

  time_recive_unsigned <= unsigned(time_recive);

  
  Switch7_out1 <= Constant_out1 WHEN transmite_on = '0' ELSE
      time_recive_unsigned;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 11
  Counter_4_step_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_4_stepreg <= to_unsigned(16#1#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Data_Type_Conversion2_out1 = '1' THEN 
          Counter_4_stepreg <= to_unsigned(16#1#, 4);
        ELSIF Relational_Operator1_relop1 = '1' THEN 
          IF Counter_4_out1 = to_unsigned(16#A#, 4) THEN 
            Counter_4_stepreg <= to_unsigned(16#5#, 4);
          ELSE 
            Counter_4_stepreg <= to_unsigned(16#1#, 4);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_4_step_process;


  START_out1 <= latch_data_out1(0);

  
  Data_Type_Conversion_out1 <= '1' WHEN START_out1 /= '0' ELSE
      '0';

  Logical_Operator5_out1 <= Logical_Operator7_out1 OR Relational_Operator1_relop1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  Counter_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_3_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator5_out1 = '1' THEN 
          Counter_3_out1 <= to_unsigned(0, 32);
        ELSIF Data_Type_Conversion_out1 = '1' THEN 
          Counter_3_out1 <= Counter_3_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_3_process;


  
  Relational_Operator1_relop1 <= '1' WHEN Counter_3_out1 = Switch7_out1 ELSE
      '0';

  Counter_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_4_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Data_Type_Conversion2_out1 = '1' THEN 
          Counter_4_out1 <= to_unsigned(16#0#, 4);
        ELSIF Relational_Operator1_relop1 = '1' THEN 
          Counter_4_out1 <= Counter_4_out1 + Counter_4_stepreg;
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_4_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN Counter_4_out1 = to_unsigned(16#A#, 4) ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Compare_To_Constant2_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Logical_Operator6_out1 <= Delay4_out1 XOR Compare_To_Constant2_out1;

  Logical_Operator7_out1 <= Logical_Operator6_out1 AND Compare_To_Constant2_out1;

  latch_data_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      latch_data_switch_delay <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator7_out1 = '1' THEN
          latch_data_switch_delay <= to_unsigned(0, 32);
        ELSIF Compare_To_Constant1_out1 = '1' THEN
          latch_data_switch_delay <= Switch_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS latch_data_process;

  
  latch_data_out1 <= to_unsigned(0, 32) WHEN Logical_Operator7_out1 = '1' ELSE
      latch_data_switch_delay;

  RST_out1 <= latch_data_out1(2);

  
  Data_Type_Conversion2_out1 <= '1' WHEN RST_out1 /= '0' ELSE
      '0';

  Def_val6_out1 <= to_unsigned(16#00#, 8);

  Done_out1 <= to_unsigned(16#01#, 8);

  
  Switch5_out1 <= Def_val6_out1 WHEN Logical_Operator7_out1 = '0' ELSE
      Done_out1;

  Def_val3_out1 <= to_unsigned(16#00#, 8);

  
  Switch3_out1 <= Switch5_out1 WHEN Data_Type_Conversion2_out1 = '0' ELSE
      Def_val3_out1;

  Data_Type_Conversion12_out1 <= resize(Switch3_out1, 32);

  DataOUT <= std_logic_vector(Data_Type_Conversion12_out1);

  Def_val5_out1 <= to_unsigned(16#00#, 8);

  adr_manage_out1 <= to_unsigned(16#02#, 8);

  
  Switch4_out1 <= Def_val5_out1 WHEN Logical_Operator7_out1 = '0' ELSE
      adr_manage_out1;

  Def_val4_out1 <= to_unsigned(16#00#, 8);

  
  Switch2_out1 <= Switch4_out1 WHEN Data_Type_Conversion2_out1 = '0' ELSE
      Def_val4_out1;

  addrOUT <= std_logic_vector(Switch2_out1);

  LOCK_out1 <= latch_data_out1(1);

  
  Data_Type_Conversion1_out1 <= '1' WHEN LOCK_out1 /= '0' ELSE
      '0';

  Def_val2_out1 <= '0';

  start_bit_out1 <= '0';

  data_out1 <= latch_data_out1(10 DOWNTO 3);

  data0_out1 <= data_out1(0);

  
  Data_Type_Conversion4_out1 <= '1' WHEN data0_out1 /= '0' ELSE
      '0';

  data1_out1 <= data_out1(1);

  
  Data_Type_Conversion5_out1 <= '1' WHEN data1_out1 /= '0' ELSE
      '0';

  data2_out1 <= data_out1(2);

  
  Data_Type_Conversion6_out1 <= '1' WHEN data2_out1 /= '0' ELSE
      '0';

  data3_out1 <= data_out1(3);

  
  Data_Type_Conversion7_out1 <= '1' WHEN data3_out1 /= '0' ELSE
      '0';

  data4_out1 <= data_out1(4);

  
  Data_Type_Conversion8_out1 <= '1' WHEN data4_out1 /= '0' ELSE
      '0';

  data5_out1 <= data_out1(5);

  
  Data_Type_Conversion9_out1 <= '1' WHEN data5_out1 /= '0' ELSE
      '0';

  data6_out1 <= data_out1(6);

  
  Data_Type_Conversion10_out1 <= '1' WHEN data6_out1 /= '0' ELSE
      '0';

  data7_out1 <= data_out1(7);

  
  Data_Type_Conversion11_out1 <= '1' WHEN data7_out1 /= '0' ELSE
      '0';

  Logical_Operator_out1 <= Data_Type_Conversion4_out1 XOR Data_Type_Conversion5_out1;

  Logical_Operator1_out1 <= Logical_Operator_out1 XOR Data_Type_Conversion6_out1;

  Logical_Operator2_out1 <= Logical_Operator1_out1 XOR Data_Type_Conversion7_out1;

  Logical_Operator3_out1 <= Logical_Operator2_out1 XOR Data_Type_Conversion8_out1;

  Logical_Operator4_out1 <= Logical_Operator3_out1 XOR Data_Type_Conversion9_out1;

  Logical_Operator8_out1 <= Logical_Operator4_out1 XOR Data_Type_Conversion10_out1;

  Logical_Operator9_out1 <= Logical_Operator8_out1 XOR Data_Type_Conversion11_out1;

  
  mux_10_in_1_out1 <= start_bit_out1 WHEN Counter_4_out1 = to_unsigned(16#0#, 4) ELSE
      Data_Type_Conversion4_out1 WHEN Counter_4_out1 = to_unsigned(16#1#, 4) ELSE
      Data_Type_Conversion5_out1 WHEN Counter_4_out1 = to_unsigned(16#2#, 4) ELSE
      Data_Type_Conversion6_out1 WHEN Counter_4_out1 = to_unsigned(16#3#, 4) ELSE
      Data_Type_Conversion7_out1 WHEN Counter_4_out1 = to_unsigned(16#4#, 4) ELSE
      Data_Type_Conversion8_out1 WHEN Counter_4_out1 = to_unsigned(16#5#, 4) ELSE
      Data_Type_Conversion9_out1 WHEN Counter_4_out1 = to_unsigned(16#6#, 4) ELSE
      Data_Type_Conversion10_out1 WHEN Counter_4_out1 = to_unsigned(16#7#, 4) ELSE
      Data_Type_Conversion11_out1 WHEN Counter_4_out1 = to_unsigned(16#8#, 4) ELSE
      Logical_Operator9_out1 WHEN Counter_4_out1 = to_unsigned(16#9#, 4) ELSE
      Logical_Operator9_out1;

  
  Switch1_out1 <= Def_val2_out1 WHEN Data_Type_Conversion1_out1 = '0' ELSE
      mux_10_in_1_out1;

  IO <= Switch1_out1;

END rtl;

