-- -------------------------------------------------------------
-- 
-- File Name: D:\Matlab_Vhd\smartCart\OTLADKA\hdlsrc\smartCart4_1_work\head_ip_dut.vhd
-- Created: 2016-07-21 09:50:09
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_dut
-- Source Path: head_ip/head_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        comanda                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        IO                                :   IN    std_logic;  -- ufix1
        data_in_1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_3                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_4                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_5                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_6                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_7                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in_8                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        ce_out                            :   OUT   std_logic;  -- ufix1
        signals                           :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
        I0_OUT                            :   OUT   std_logic;  -- ufix1
        strob                             :   OUT   std_logic;  -- ufix1
        Out1                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out2                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out3                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out4                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out5                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out6                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out7                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        Out8                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        irq                               :   OUT   std_logic;  -- ufix1
        status                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        trans_io                          :   OUT   std_logic;  -- ufix1
        switch_io                         :   OUT   std_logic  -- ufix1
        );
END head_ip_dut;


ARCHITECTURE rtl OF head_ip_dut IS

  -- Component Declarations
  COMPONENT head_ip_src_head
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          comanda                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          IO                              :   IN    std_logic;  -- ufix1
          data_in_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_4                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_5                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_6                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_7                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in_8                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          signals                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
          I0_OUT                          :   OUT   std_logic;  -- ufix1
          strob                           :   OUT   std_logic;  -- ufix1
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out2                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out3                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out4                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out5                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out6                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out7                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          Out8                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          irq                             :   OUT   std_logic;  -- ufix1
          status                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          trans_io                        :   OUT   std_logic;  -- ufix1
          switch_io                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : head_ip_src_head
    USE ENTITY work.head_ip_src_head(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL IO_sig                           : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL signals_sig                      : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL I0_OUT_sig                       : std_logic;  -- ufix1
  SIGNAL strob_sig                        : std_logic;  -- ufix1
  SIGNAL Out1_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out2_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out3_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out4_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out5_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out6_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out7_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Out8_sig                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL irq_sig                          : std_logic;  -- ufix1
  SIGNAL status_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL trans_io_sig                     : std_logic;  -- ufix1
  SIGNAL switch_io_sig                    : std_logic;  -- ufix1

BEGIN
  u_head_ip_src_head : head_ip_src_head
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              comanda => comanda,  -- ufix32
              IO => IO_sig,  -- ufix1
              data_in_1 => data_in_1,  -- ufix32
              data_in_2 => data_in_2,  -- ufix32
              data_in_3 => data_in_3,  -- ufix32
              data_in_4 => data_in_4,  -- ufix32
              data_in_5 => data_in_5,  -- ufix32
              data_in_6 => data_in_6,  -- ufix32
              data_in_7 => data_in_7,  -- ufix32
              data_in_8 => data_in_8,  -- ufix32
              ce_out => ce_out_sig,  -- ufix1
              signals => signals_sig,  -- sfix4
              I0_OUT => I0_OUT_sig,  -- ufix1
              strob => strob_sig,  -- ufix1
              Out1 => Out1_sig,  -- ufix8
              Out2 => Out2_sig,  -- ufix8
              Out3 => Out3_sig,  -- ufix8
              Out4 => Out4_sig,  -- ufix8
              Out5 => Out5_sig,  -- ufix8
              Out6 => Out6_sig,  -- ufix8
              Out7 => Out7_sig,  -- ufix8
              Out8 => Out8_sig,  -- ufix8
              irq => irq_sig,  -- ufix1
              status => status_sig,  -- ufix32
              trans_io => trans_io_sig,  -- ufix1
              switch_io => switch_io_sig  -- ufix1
              );

  IO_sig <= IO;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  signals <= signals_sig;

  I0_OUT <= I0_OUT_sig;

  strob <= strob_sig;

  Out1 <= Out1_sig;

  Out2 <= Out2_sig;

  Out3 <= Out3_sig;

  Out4 <= Out4_sig;

  Out5 <= Out5_sig;

  Out6 <= Out6_sig;

  Out7 <= Out7_sig;

  Out8 <= Out8_sig;

  irq <= irq_sig;

  status <= status_sig;

  trans_io <= trans_io_sig;

  switch_io <= switch_io_sig;

END rtl;

