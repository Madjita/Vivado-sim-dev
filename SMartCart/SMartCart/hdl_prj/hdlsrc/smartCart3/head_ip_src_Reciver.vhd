-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\smartCart3\head_ip_src_Reciver.vhd
-- Created: 2016-07-12 09:39:09
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_src_Reciver
-- Source Path: smartCart3/head/Reciver
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_src_Reciver IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_const_rate                    :   IN    std_logic;
        RST                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        IO                                :   IN    std_logic;
        STOP                              :   IN    std_logic;
        Aadrrd                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        adr_IN                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_in                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        AddrOUT                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        STATUS                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        DataOUT1                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Strob                             :   OUT   std_logic
        );
END head_ip_src_Reciver;


ARCHITECTURE rtl OF head_ip_src_Reciver IS

  -- Component Declarations
  COMPONENT head_ip_src_SinglePortRAM_Wrapper_32x8b
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          addr                            :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : head_ip_src_SinglePortRAM_Wrapper_32x8b
    USE ENTITY work.head_ip_src_SinglePortRAM_Wrapper_32x8b(rtl);

  -- Signals
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Logical_Operator9_out1           : std_logic;
  SIGNAL RST_signed                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator25_out1          : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable_out1 : std_logic;
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL HDL_Counter2_out1                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Logical_Operator11_out1          : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL HDL_Counter2_stepreg             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;
  SIGNAL HDL_Counter1_out1                : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Delay3_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Logical_Operator12_out1          : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable1_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable1_out1 : std_logic;
  SIGNAL Compare_To_Constant13_out1       : std_logic;
  SIGNAL Constant9_out1                   : std_logic;
  SIGNAL Logical_Operator22_out1          : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator32_out1          : std_logic;
  SIGNAL Logical_Operator33_out1          : std_logic;
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant2_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch2_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant3_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL adr_IN_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant16_out1       : std_logic;
  SIGNAL Constant8_out1                   : std_logic;
  SIGNAL Constant7_out1                   : std_logic;
  SIGNAL Switch7_out1                     : std_logic;
  SIGNAL data_in_unsigned                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Data_Type_Conversion3_out1       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL HDL_Counter3_out1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant15_out1       : std_logic;
  SIGNAL Logical_Operator37_out1          : std_logic;
  SIGNAL Logical_Operator36_out1          : std_logic;
  SIGNAL Data_Type_Conversion2_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant4_out1                   : std_logic;
  SIGNAL Bit_Concat1_out1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat1_out1_dtc             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch3_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant5_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Constant5_out1        : std_logic;
  SIGNAL Logical_Operator13_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable2_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable2_out1 : std_logic;
  SIGNAL Compare_To_Constant6_out1        : std_logic;
  SIGNAL Logical_Operator14_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable3_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable3_out1 : std_logic;
  SIGNAL Compare_To_Constant7_out1        : std_logic;
  SIGNAL Logical_Operator15_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable4_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable4_out1 : std_logic;
  SIGNAL Compare_To_Constant8_out1        : std_logic;
  SIGNAL Logical_Operator16_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable5_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable5_out1 : std_logic;
  SIGNAL Compare_To_Constant9_out1        : std_logic;
  SIGNAL Logical_Operator17_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable6_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable6_out1 : std_logic;
  SIGNAL Compare_To_Constant14_out1       : std_logic;
  SIGNAL Logical_Operator18_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable7_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable7_out1 : std_logic;
  SIGNAL Compare_To_Constant10_out1       : std_logic;
  SIGNAL Logical_Operator19_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable8_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable8_out1 : std_logic;
  SIGNAL Compare_To_Constant11_out1       : std_logic;
  SIGNAL Logical_Operator20_out1          : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable9_switch_delay : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Resettable9_out1 : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch1_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Aadrrd_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion1_out1       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch6_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant11_out1                  : std_logic;
  SIGNAL Constant6_out1                   : std_logic;
  SIGNAL Switch5_out1                     : std_logic;
  SIGNAL Single_Port_RAM_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1                  : std_logic;
  SIGNAL Compare_To_Constant17_out1       : std_logic;
  SIGNAL Switch8_out1                     : std_logic;
  SIGNAL SA12_out1                        : std_logic;
  SIGNAL HDL_Counter4_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Logical_Operator34_out1          : std_logic;

BEGIN
  -- Cхема формирования байта и проверка четности
  -- 
  -- Схема связи (5)
  -- 
  -- Схема формирования отчёта о работе приёмника (4)
  -- 
  -- cхема управления и синхронизации (2)
  -- 
  -- Схема обнаружение сообщения (1)

  u_Single_Port_RAM : head_ip_src_SinglePortRAM_Wrapper_32x8b
    PORT MAP( clk => clk,
              enb => enb,
              din => std_logic_vector(Switch4_out1),  -- uint8
              addr => std_logic_vector(Switch6_out1),  -- ufix5
              we => Switch5_out1,
              dout => Single_Port_RAM_out1  -- uint8
              );

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= STOP;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator5_out1 <= Delay1_out1 XOR STOP;

  Logical_Operator9_out1 <= Logical_Operator5_out1 AND STOP;

  RST_signed <= signed(RST);

  Bit_Slice1_out1 <= RST_signed(3);

  Logical_Operator25_out1 <= Bit_Slice1_out1 AND IO;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Logical_Operator25_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Logical_Operator2_out1 <= Delay_out1 XOR Logical_Operator25_out1;

  Logical_Operator4_out1 <=  NOT Logical_Operator25_out1;

  Logical_Operator3_out1 <= Logical_Operator2_out1 AND Logical_Operator4_out1;

  Logical_Operator1_out1 <= Logical_Operator7_out1 OR Logical_Operator9_out1;

  Unit_Delay_Enabled_Resettable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator1_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_switch_delay <= '0';
        ELSIF Logical_Operator3_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_switch_delay <= Logical_Operator3_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_process;

  
  Unit_Delay_Enabled_Resettable_out1 <= '0' WHEN Logical_Operator1_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable_switch_delay;

  Logical_Operator8_out1 <= Logical_Operator9_out1 OR (Compare_To_Constant4_out1 OR Logical_Operator7_out1);

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator8_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#0000#, 13);
        ELSIF Unit_Delay_Enabled_Resettable_out1 = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#0001#, 13);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant4_out1 <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#0A2C#, 13) ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 10
  HDL_Counter2_step_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_stepreg <= to_unsigned(16#1#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator11_out1 = '1' THEN 
          HDL_Counter2_stepreg <= to_unsigned(16#1#, 4);
        ELSIF Logical_Operator_out1 = '1' THEN 
          IF HDL_Counter2_out1 = to_unsigned(16#9#, 4) THEN 
            HDL_Counter2_stepreg <= to_unsigned(16#6#, 4);
          ELSE 
            HDL_Counter2_stepreg <= to_unsigned(16#1#, 4);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_step_process;


  Logical_Operator11_out1 <= Logical_Operator7_out1 OR Logical_Operator9_out1;

  HDL_Counter2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator11_out1 = '1' THEN 
          HDL_Counter2_out1 <= to_unsigned(16#0#, 4);
        ELSIF Logical_Operator_out1 = '1' THEN 
          HDL_Counter2_out1 <= HDL_Counter2_out1 + HDL_Counter2_stepreg;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN HDL_Counter2_out1 = to_unsigned(16#A#, 4) ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Compare_To_Constant2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Logical_Operator6_out1 <= Delay2_out1 XOR Compare_To_Constant2_out1;

  Logical_Operator7_out1 <= Logical_Operator6_out1 AND Compare_To_Constant2_out1;

  Logical_Operator10_out1 <= Logical_Operator7_out1 OR Logical_Operator9_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator10_out1 = '1' THEN 
          HDL_Counter1_out1 <= '0';
        ELSIF Compare_To_Constant4_out1 = '1' THEN 
          HDL_Counter1_out1 <=  NOT HDL_Counter1_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter1_out1 = '0' ELSE
      '0';

  Logical_Operator_out1 <= Compare_To_Constant1_out1 AND Compare_To_Constant4_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= HDL_Counter2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#0#, 4) ELSE
      '0';

  Logical_Operator12_out1 <= Logical_Operator_out1 AND Compare_To_Constant3_out1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Logical_Operator7_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Unit_Delay_Enabled_Resettable1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable1_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable1_switch_delay <= '0';
        ELSIF Logical_Operator12_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable1_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable1_process;

  
  Unit_Delay_Enabled_Resettable1_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable1_switch_delay;

  
  Compare_To_Constant13_out1 <= '1' WHEN Unit_Delay_Enabled_Resettable1_out1 = '0' ELSE
      '0';

  Constant9_out1 <= '1';

  Logical_Operator22_out1 <= Constant9_out1 AND (Compare_To_Constant13_out1 AND Logical_Operator7_out1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Logical_Operator22_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator32_out1 <= Delay4_out1 XOR Logical_Operator22_out1;

  Logical_Operator33_out1 <= Logical_Operator32_out1 AND Logical_Operator22_out1;

  Constant1_out1 <= to_unsigned(16#00#, 8);

  Constant2_out1 <= to_unsigned(16#03#, 8);

  
  Switch2_out1 <= Constant1_out1 WHEN Logical_Operator33_out1 = '0' ELSE
      Constant2_out1;

  AddrOUT <= std_logic_vector(Switch2_out1);

  Constant3_out1 <= to_unsigned(0, 32);

  adr_IN_unsigned <= unsigned(adr_IN);

  
  Compare_To_Constant16_out1 <= '1' WHEN adr_IN_unsigned = to_unsigned(16#01#, 8) ELSE
      '0';

  Constant8_out1 <= '0';

  Constant7_out1 <= '1';

  
  Switch7_out1 <= Constant8_out1 WHEN Compare_To_Constant16_out1 = '0' ELSE
      Constant7_out1;

  data_in_unsigned <= unsigned(data_in);

  Bit_Slice_out1 <= data_in_unsigned(5 DOWNTO 0);

  Data_Type_Conversion3_out1 <= Bit_Slice_out1(4 DOWNTO 0);

  
  Compare_To_Constant15_out1 <= '1' WHEN HDL_Counter3_out1 = to_unsigned(16#1F#, 5) ELSE
      '0';

  Logical_Operator37_out1 <=  NOT Compare_To_Constant15_out1;

  Logical_Operator36_out1 <= Logical_Operator22_out1 AND Logical_Operator37_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Switch7_out1 = '1' THEN 
          HDL_Counter3_out1 <= Data_Type_Conversion3_out1;
        ELSIF Logical_Operator36_out1 = '1' THEN 
          HDL_Counter3_out1 <= HDL_Counter3_out1 + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  Data_Type_Conversion2_out1 <= resize(HDL_Counter3_out1, 8);

  Constant4_out1 <= '1';

  Bit_Concat1_out1 <= Data_Type_Conversion2_out1 & Constant4_out1;

  Bit_Concat1_out1_dtc <= resize(Bit_Concat1_out1, 32);

  
  Switch3_out1 <= Constant3_out1 WHEN Logical_Operator33_out1 = '0' ELSE
      Bit_Concat1_out1_dtc;

  STATUS <= std_logic_vector(Switch3_out1);

  Constant5_out1 <= to_unsigned(16#00#, 8);

  Constant_out1 <= to_unsigned(16#00#, 8);

  
  Compare_To_Constant5_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#1#, 4) ELSE
      '0';

  Logical_Operator13_out1 <= Compare_To_Constant5_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable2_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable2_switch_delay <= '0';
        ELSIF Logical_Operator13_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable2_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable2_process;

  
  Unit_Delay_Enabled_Resettable2_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable2_switch_delay;

  
  Compare_To_Constant6_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#2#, 4) ELSE
      '0';

  Logical_Operator14_out1 <= Compare_To_Constant6_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable3_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable3_switch_delay <= '0';
        ELSIF Logical_Operator14_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable3_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable3_process;

  
  Unit_Delay_Enabled_Resettable3_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable3_switch_delay;

  
  Compare_To_Constant7_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#3#, 4) ELSE
      '0';

  Logical_Operator15_out1 <= Compare_To_Constant7_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable4_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable4_switch_delay <= '0';
        ELSIF Logical_Operator15_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable4_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable4_process;

  
  Unit_Delay_Enabled_Resettable4_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable4_switch_delay;

  
  Compare_To_Constant8_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#4#, 4) ELSE
      '0';

  Logical_Operator16_out1 <= Compare_To_Constant8_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable5_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable5_switch_delay <= '0';
        ELSIF Logical_Operator16_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable5_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable5_process;

  
  Unit_Delay_Enabled_Resettable5_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable5_switch_delay;

  
  Compare_To_Constant9_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#5#, 4) ELSE
      '0';

  Logical_Operator17_out1 <= Compare_To_Constant9_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable6_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable6_switch_delay <= '0';
        ELSIF Logical_Operator17_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable6_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable6_process;

  
  Unit_Delay_Enabled_Resettable6_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable6_switch_delay;

  
  Compare_To_Constant14_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#6#, 4) ELSE
      '0';

  Logical_Operator18_out1 <= Compare_To_Constant14_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable7_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable7_switch_delay <= '0';
        ELSIF Logical_Operator18_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable7_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable7_process;

  
  Unit_Delay_Enabled_Resettable7_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable7_switch_delay;

  
  Compare_To_Constant10_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#7#, 4) ELSE
      '0';

  Logical_Operator19_out1 <= Compare_To_Constant10_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable8_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable8_switch_delay <= '0';
        ELSIF Logical_Operator19_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable8_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable8_process;

  
  Unit_Delay_Enabled_Resettable8_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable8_switch_delay;

  
  Compare_To_Constant11_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#8#, 4) ELSE
      '0';

  Logical_Operator20_out1 <= Compare_To_Constant11_out1 AND Logical_Operator_out1;

  Unit_Delay_Enabled_Resettable9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable9_switch_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        IF Delay5_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable9_switch_delay <= '0';
        ELSIF Logical_Operator20_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable9_switch_delay <= IO;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable9_process;

  
  Unit_Delay_Enabled_Resettable9_out1 <= '0' WHEN Delay5_out1 = '1' ELSE
      Unit_Delay_Enabled_Resettable9_switch_delay;

  Bit_Concat_out1 <= unsigned'(Unit_Delay_Enabled_Resettable2_out1 & Unit_Delay_Enabled_Resettable3_out1 & Unit_Delay_Enabled_Resettable4_out1 & Unit_Delay_Enabled_Resettable5_out1 & Unit_Delay_Enabled_Resettable6_out1 & Unit_Delay_Enabled_Resettable7_out1 & Unit_Delay_Enabled_Resettable8_out1 & Unit_Delay_Enabled_Resettable9_out1);

  
  Switch1_out1 <= Constant_out1 WHEN Logical_Operator22_out1 = '0' ELSE
      Bit_Concat_out1;

  Aadrrd_unsigned <= unsigned(Aadrrd);

  Data_Type_Conversion1_out1 <= Aadrrd_unsigned(4 DOWNTO 0);

  
  Switch4_out1 <= Constant5_out1 WHEN Logical_Operator22_out1 = '0' ELSE
      Switch1_out1;

  
  Switch6_out1 <= Data_Type_Conversion1_out1 WHEN Logical_Operator22_out1 = '0' ELSE
      HDL_Counter3_out1;

  Constant11_out1 <= '0';

  Constant6_out1 <= '1';

  
  Switch5_out1 <= Constant11_out1 WHEN Logical_Operator22_out1 = '0' ELSE
      Constant6_out1;

  Constant10_out1 <= '0';

  
  Switch8_out1 <= Logical_Operator_out1 WHEN Compare_To_Constant17_out1 = '0' ELSE
      Constant10_out1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter4_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Compare_To_Constant17_out1 = '1' THEN 
          HDL_Counter4_out1 <= to_unsigned(16#00#, 8);
        ELSIF SA12_out1 = '1' THEN 
          HDL_Counter4_out1 <= HDL_Counter4_out1 + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter4_process;


  
  Compare_To_Constant17_out1 <= '1' WHEN HDL_Counter4_out1 = to_unsigned(16#C8#, 8) ELSE
      '0';

  Logical_Operator34_out1 <= Logical_Operator_out1 OR Compare_To_Constant17_out1;

  SA12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      SA12_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Logical_Operator34_out1 = '1' THEN
        SA12_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS SA12_process;


  DataOUT1 <= Single_Port_RAM_out1;

  Strob <= SA12_out1;

END rtl;

