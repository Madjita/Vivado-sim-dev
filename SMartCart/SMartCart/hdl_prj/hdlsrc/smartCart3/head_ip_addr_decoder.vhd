-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\smartCart3\head_ip_addr_decoder.vhd
-- Created: 2016-07-12 09:39:12
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_addr_decoder
-- Source Path: head_ip/head_ip_axi_lite/head_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_adrOUT                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_STATUS                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_DataOut                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_START                       :   OUT   std_logic;  -- ufix1
        write_adrRDIN                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_adrIN                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_dataIN                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_STOP                        :   OUT   std_logic  -- ufix1
        );
END head_ip_addr_decoder;


ARCHITECTURE rtl OF head_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_adrOUT                : std_logic;  -- ufix1
  SIGNAL read_adrOUT_unsigned             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_STATUS_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_DataOut_unsigned            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_DataOut               : std_logic;  -- ufix1
  SIGNAL decode_sel_STATUS                : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_adrOUT                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_adrOUT                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_adrOUT                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_STATUS                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_STATUS                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_DataOut                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_DataOut                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_DataOut                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_START                 : std_logic;  -- ufix1
  SIGNAL reg_enb_START                    : std_logic;  -- ufix1
  SIGNAL data_in_START                    : std_logic;  -- ufix1
  SIGNAL write_reg_START                  : std_logic;  -- ufix1
  SIGNAL decode_sel_adrRDIN               : std_logic;  -- ufix1
  SIGNAL reg_enb_adrRDIN                  : std_logic;  -- ufix1
  SIGNAL data_in_adrRDIN                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL write_reg_adrRDIN                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_adrIN                 : std_logic;  -- ufix1
  SIGNAL reg_enb_adrIN                    : std_logic;  -- ufix1
  SIGNAL data_in_adrIN                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL write_reg_adrIN                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_dataIN                : std_logic;  -- ufix1
  SIGNAL reg_enb_dataIN                   : std_logic;  -- ufix1
  SIGNAL write_reg_dataIN                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_STOP                  : std_logic;  -- ufix1
  SIGNAL reg_enb_STOP                     : std_logic;  -- ufix1
  SIGNAL data_in_STOP                     : std_logic;  -- ufix1
  SIGNAL write_reg_STOP                   : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_adrOUT <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  read_adrOUT_unsigned <= unsigned(read_adrOUT);

  const_1 <= '1';

  enb <= const_1;

  read_STATUS_unsigned <= unsigned(read_STATUS);

  read_DataOut_unsigned <= unsigned(read_DataOut);

  
  decode_sel_DataOut <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  
  decode_sel_STATUS <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_adrOUT_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_adrOUT <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_adrOUT <= read_adrOUT_unsigned;
      END IF;
    END IF;
  END PROCESS reg_adrOUT_process;


  data_in_adrOUT <= resize(read_reg_adrOUT, 32);

  
  decode_rd_adrOUT <= const_0 WHEN decode_sel_adrOUT = '0' ELSE
      data_in_adrOUT;

  reg_STATUS_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_STATUS <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_STATUS <= read_STATUS_unsigned;
      END IF;
    END IF;
  END PROCESS reg_STATUS_process;


  
  decode_rd_STATUS <= decode_rd_adrOUT WHEN decode_sel_STATUS = '0' ELSE
      read_reg_STATUS;

  reg_DataOut_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_DataOut <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_DataOut <= read_DataOut_unsigned;
      END IF;
    END IF;
  END PROCESS reg_DataOut_process;


  data_in_DataOut <= resize(read_reg_DataOut, 32);

  
  decode_rd_DataOut <= decode_rd_STATUS WHEN decode_sel_DataOut = '0' ELSE
      data_in_DataOut;

  data_read <= std_logic_vector(decode_rd_DataOut);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_START <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_START <= decode_sel_START AND wr_enb;

  data_in_START <= data_write_unsigned(0);

  reg_START_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_START <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_START = '1' THEN
        write_reg_START <= data_in_START;
      END IF;
    END IF;
  END PROCESS reg_START_process;


  write_START <= write_reg_START;

  
  decode_sel_adrRDIN <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_adrRDIN <= decode_sel_adrRDIN AND wr_enb;

  data_in_adrRDIN <= data_write_unsigned(7 DOWNTO 0);

  reg_adrRDIN_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_adrRDIN <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_adrRDIN = '1' THEN
        write_reg_adrRDIN <= data_in_adrRDIN;
      END IF;
    END IF;
  END PROCESS reg_adrRDIN_process;


  write_adrRDIN <= std_logic_vector(write_reg_adrRDIN);

  
  decode_sel_adrIN <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_adrIN <= decode_sel_adrIN AND wr_enb;

  data_in_adrIN <= data_write_unsigned(7 DOWNTO 0);

  reg_adrIN_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_adrIN <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_adrIN = '1' THEN
        write_reg_adrIN <= data_in_adrIN;
      END IF;
    END IF;
  END PROCESS reg_adrIN_process;


  write_adrIN <= std_logic_vector(write_reg_adrIN);

  
  decode_sel_dataIN <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_dataIN <= decode_sel_dataIN AND wr_enb;

  reg_dataIN_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_dataIN <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataIN = '1' THEN
        write_reg_dataIN <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataIN_process;


  write_dataIN <= std_logic_vector(write_reg_dataIN);

  
  decode_sel_STOP <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_STOP <= decode_sel_STOP AND wr_enb;

  data_in_STOP <= data_write_unsigned(0);

  reg_STOP_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_STOP <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_STOP = '1' THEN
        write_reg_STOP <= data_in_STOP;
      END IF;
    END IF;
  END PROCESS reg_STOP_process;


  write_STOP <= write_reg_STOP;

END rtl;

