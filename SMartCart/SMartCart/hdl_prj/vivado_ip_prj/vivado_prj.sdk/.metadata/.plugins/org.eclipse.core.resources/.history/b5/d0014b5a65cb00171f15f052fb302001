/*
 * smartCard.h
 *
 *  Created on: 14 сент. 2016 г.
 *      Author: Admin
 */

#ifndef SMARTCARD_H_
#define SMARTCARD_H_
/**
 * @file smartCard.h
 * @author Alexey Ts
 * Library for working with smart cards developed with ISO 7816
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xscugic.h"
#include "type_data.h"
#include "sleep.h"
#include "xil_types.h"
#include "xil_exception.h"
#include "xplatform_info.h"
#include "xil_exception.h"

//-----------------------------------------XillFunctions------------------------------//

/**объект прерываний SmartCard*/
typedef ProgSmartCart;
typedef ProgSmartCart_1;
typedef ProgSmartCart_2;
/**Структура контроллера прерываний*/
XScuGic InterruptController;
/**структура для обмена ингформацие с smartCard*/
cInterfaceSmartcard cinterfacesmartcard;
/**базовый адрес ip ядра большой картридер*/
static int baseaddress= XPAR_HEAD_IP_0_BASEADDR;
/**базовый адрес ip ядра малый картридер*/
static int baseaddress_smoll_card=XPAR_HEAD_IP_1_BASEADDR;

/**Обработчик прерываний smartCard**/
void SetSmartCart();
/**Обработчик прерывания обнаружения SmartCard*/
void DetectSmartCart();
/**Контроллер прерываний (объявление прерываний)**/
int ScuGicInterrupt_Init(u16 DeviceId,ProgSmartCart *pProgSmartCart, ProgSmartCart_1 *pProgSmartCart_1, ProgSmartCart_2 *pProgSmartCart_2);
/**контроллер прерываний(Инициализация)**/
int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr);
/**предварительная настройка работы SmartCard**/
unsigned intcial(char number_cart_rider);


//----------------------------SmartCardFunctions-----------------------//
//Все результаты выполнения нижеописанных функций записываются в reciveBuffer структуры cinterfacesmartcard

/**
 * Структура ответа APDU (см. ГОСТ 7816-4)
 * **/

/**Считывает серийный номер карты **/
char*  read_serial_number(int numer_sim);
/**Считывает результат самотестирования карты **/
unsigned test_result();
/**Тестирование файловой системы **/
unsigned test_fs();

//Выбор файла
unsigned select(char tk_1, char tk_2,int numer_sim);

unsigned activate(char tk_1, char tk_2);

unsigned delete(char tk_1, char tk_2);

//востановление
unsigned restore();

unsigned create_ef(char* size,char* id,char AC, char B18,int numer_sim);

unsigned update_binary(char* data,char size_ef,int kod,int numer_sim);

unsigned read_binary(char size_ef,int kod,int numer_sim);

unsigned diversify_key(char* key,int numer_sim);

unsigned save_div_key(char tk_1, char tk_2,int numer_sim);


/**Считывает случайное число которое выработала **/
char* get_challenge(char L,int numer_sim);

unsigned update_key(char* key,int number,int numer_sim);

/**Считывает имитовставку Smartcard**/
char check_rom(char* key,int numer_sim);
/**производит первоначальную запись транспортного ключа в масочное ПЗУ**/
unsigned write_tk_pl();
/**Создает Мастер файл, переводит карту в режим эксплуатации**/
unsigned create_mf();
/**считывает текущую информацию о карте(также получает доп сведенья после опр комманд см.руководство программиста ОС РИК)**/
char* get_response(char size, int numer_sim);
/**Записывает транспортный ключ в ЭСППЗУ(обязательное условия выполнения успешное выполнения функции verify_tk() )**/
unsigned write_tk();
/**Производит проверку предоставленного транспортного ключа с тем что записан на карте**/
unsigned verify_tk(char tk_1, char tk_2, char tk_3, char tk_4, int numer_sim); //, unsigned tk_5, unsigned tk_6, unsigned tk_7, unsigned tk_8


unsigned verify(char* key,int number); //(char tk_1, char tk_2, char tk_3, char tk_4);


char* get_session_key(char* mass);

unsigned load_key(char* key, int number);

unsigned lock_key();

/**Создает папку внутри смарт карты в текущей папке*/
unsigned create_df(char* id,char AC);
/**Производит внутреннюю аутентификацию, результатом выполнгения является криптогнрамма*/
unsigned internal_auth(char sim_number);

unsigned external_authenticate(char* kriptogramma);

/**Создает KF внутри смарт карты*/
unsigned create_kf(char id,char* AC, char B18, char B19);

unsigned unlock_key();

#endif /* SMARTCARD_H_ */
