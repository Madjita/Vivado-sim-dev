/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "smartCard.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main()
{
  //  init_platform();
    int a =0 ,status =0 , i =0;
    char sim_number = 0;
    char* serial_numer = malloc(4);
    Ccomanda ccomanda;
    status=intcial(0);//инициализация  начальных настроек смарт карты  №1
    start(&ccomanda,&cinterfacesmartcard,0);// инициализация смарт карты
    cinterfacesmartcard.ok =0;
    while(cinterfacesmartcard.ok==0){}// ожидание окончания инициализации
    cinterfacesmartcard.ok=0;
    //------------------------------------------
    status=intcial(1);//инициализация  начальных настроек смарт карты №2
    start(&ccomanda,&cinterfacesmartcard,1);// инициализация смарт карты
    cinterfacesmartcard.ok =0;
    while(cinterfacesmartcard.ok==0){}// ожидание окончания инициализации
    cinterfacesmartcard.ok=0;


    // РАБОТАЕТ СИМКА !

  //  verify_tk(0x21,0x21,0x21,0x21,1);
  //  verify_tk(0x21,0x21,0x21,0x21,0);

  //  select(0x3F,0x00);


///////
  //  select(0x00,0x00);

 //   char AC_ef_kod = 0x00;
 //   char id_ef_kod[2];
//    id_ef_kod[0] = 0x00;
 //   id_ef_kod[1] = 0x02;
//    char size_ef_kod[2];
//    size_ef_kod[0]=0x00;
//    size_ef_kod[1]=0x0e;

 //   select(0x00,0x02);
    //printf("Создаем файл EF id = 0x00 0x02 \n");
   //create_ef(size_ef_kod,id_ef_kod,AC_ef_kod,0x01);

 //   char data[2];

 //   data[0]= 0x10;
 //   data[1]= 0x11;

    //update_binary(data,0x01,0);

 //   select(0x00,0x002);

   // read_binary(0x02,1);


 //   AC_ef_kod = 0x00;

 //   id_ef_kod[0] = 0x00;
 //   id_ef_kod[1] = 0x03;

 //   size_ef_kod[0]=0x00;
 //   size_ef_kod[1]=0x0e; //2+12

 //   select(0x00,0x00);
//   select(0x00,0x03);
   // printf("Создаем файл EF id = 0x00 0x03 \n");
   // create_ef(size_ef_kod,id_ef_kod,AC_ef_kod,0x02);

/*    char password_key2[32];

    password_key2[0] = 0x8E;
    password_key2[1] = 0xD5;
    password_key2[2] = 0xD6;
    password_key2[3] = 0x3D;
    password_key2[4] = 0xBB;
    password_key2[5] = 0xA2;
    password_key2[6] = 0x21;
    password_key2[7] = 0x36;


    password_key2[8] = 0x8E;
    password_key2[9] = 0xD5;
    password_key2[10] = 0xD6;
    password_key2[11] = 0x3D;
    password_key2[12] = 0xBB;
    password_key2[13] = 0xA2;
    password_key2[14] = 0x21;
    password_key2[15] = 0x36;


    password_key2[16] = 0x8E;
    password_key2[17] = 0xD5;
    password_key2[18] = 0xD6;
    password_key2[19] = 0x3D;
    password_key2[20] = 0xBB;
    password_key2[21] = 0xA2;
    password_key2[22] = 0x21;
    password_key2[23] = 0x36;


    password_key2[24] = 0x8E;
    password_key2[25] = 0xD5;
    password_key2[26] = 0xD6;
    password_key2[27] = 0x3D;
    password_key2[28] = 0xBB;
    password_key2[29] = 0xA2;
    password_key2[30] = 0x21;
    password_key2[31] = 0x36;



    char* check = get_response(check_rom(password_key2));

    char data_2[14];

    data_2[0] = 0x60;
    data_2[1] = 0x60;
    data_2[2] = 0x60;
    data_2[3] = 0x60;
    data_2[4] = 0x60;
    data_2[5] = 0x60;
    data_2[6] = 0x60;
    data_2[7] = 0x60;

    data_2[8] = 0x10;
    data_2[9] = 0x11;

    data_2[10] = check[0];
    data_2[11] = check[1];
    data_2[12] = check[2];
    data_2[13] = check[3];


    update_binary(data_2,0x02,1);

    read_binary(0x02,0);
*/
    ///////



//*********Cоздаем файловую систему (правая)********************
/*    char id[2];
    id[0] = 0x00;
    id[1] =0x04;// 0x08;
    char AC_df = 0x00;

    select(id[0],id[1]);
    if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
    {
    	printf("Создаем файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    	create_df(id,AC_df);
    }
    else
    {
    	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    }

*/
    //////////////////////////////
/*    char AC_ef = 0x01;
    char id_ef[2];
    id_ef[0] = 0x00;
    id_ef[1] = 0x09;
    char size_ef[2];
    size_ef[0]=0x00;
    size_ef[1]=0x02;



    select(id_ef[0],id_ef[1]);
    if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
    {
    	printf("Создаем файл EF id = 0x%02hhx 0x%02hhx \n",id_ef[0],id_ef[1]);
    	create_ef(size_ef,id_ef,AC_ef,0x00);
    	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    	select(0x00,0x08);//переход обратно на DF 0x00 0x08
    }
    else
    {
    	printf("Файл  EF с id = 0x00 0x09 существует \n");
    	printf("Перешли на файл DF id = 0x00 0x08 \n");
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }
*/
    //////////////////////////////////////

/*    char AC_kf_11[4];
    AC_kf_11[0] = 0x02;
    AC_kf_11[1] = 0x00;
    AC_kf_11[2] = 0xF0;
    AC_kf_11[3] = 0xFF;

    select(0xFF,0x011);
    if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
    {
    	printf("Создаем файл KF id = 0xFF 0x11 \n");
    	create_kf(0x11,AC_kf_11,0xF0,0x3D);
    	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }
    else
    {
    	printf("Файл  KF с id = 0xFF 0x11 существует \n");
    	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }
*/
    //////////////////////////////////

/*    char AC_kf_12[4];
    char password[8];
    AC_kf_12[0] = 0x0F;
    AC_kf_12[1] = 0x0F;
    AC_kf_12[2] = 0x00;
    AC_kf_12[3] = 0xFF;


    select(0xFF,0x012);
    if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
    {
    	printf("Создаем файл KF id = 0xFF 0x12 \n");
    	create_kf(0x12,AC_kf_12,0x40,0x00);



        password[0] = 0x8E;
        password[1] = 0xD5;
        password[2] = 0xD6;
        password[3] = 0x3D;
        password[4] = 0xBB;
        password[5] = 0xA2;
        password[6] = 0x21;
        password[7] = 0x36;

        load_key(password,0); // Загрузка пароля в KF FF 12

    	printf("Перешли на файл DF id = 0x00 0x08 \n");
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }
    else
    {
    	printf("Файл  KF с id = 0xFF 0x12 существует \n");
    	printf("Перешли на файл DF id = 0x00 0x08 \n");
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }

    //////////////////////////////////
*/

/*   char AC_kf_10[4];
    char password_key[32];
    AC_kf_10[0] = 0x2F;
    AC_kf_10[1] = 0xFF;
    AC_kf_10[2] = 0xF2;
    AC_kf_10[3] = 0x2F;


    select(0xFF,0x010);
    if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
    {
    	printf("Создаем файл KF id = 0xFF 0x10 \n");
    	create_kf(0x10,AC_kf_10,0x20,0x03);

           password_key[0] = 0x8E;
           password_key[1] = 0xD5;
           password_key[2] = 0xD6;
           password_key[3] = 0x3D;
           password_key[4] = 0xBB;
           password_key[5] = 0xA2;
           password_key[6] = 0x21;
           password_key[7] = 0x36;


           password_key[8] = 0x8E;
           password_key[9] = 0xD5;
           password_key[10] = 0xD6;
           password_key[11] = 0x3D;
           password_key[12] = 0xBB;
           password_key[13] = 0xA2;
           password_key[14] = 0x21;
           password_key[15] = 0x36;


           password_key[16] = 0x8E;
           password_key[17] = 0xD5;
           password_key[18] = 0xD6;
           password_key[19] = 0x3D;
           password_key[20] = 0xBB;
           password_key[21] = 0xA2;
           password_key[22] = 0x21;
           password_key[23] = 0x36;


           password_key[24] = 0x8E;
           password_key[25] = 0xD5;
           password_key[26] = 0xD6;
           password_key[27] = 0x3D;
           password_key[28] = 0xBB;
           password_key[29] = 0xA2;
           password_key[30] = 0x21;
           password_key[31] = 0x36;

           load_key(password_key,1); // Загрузка ключа в KF FF 10


    	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }
    else
    {
    	printf("Файл  KF с id = 0xFF 0x10 существует \n");
    	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
    	select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }
*/
    //////////////////////////////////

//*********Конец Cоздания файловой системы (правая)********************


//*********Cоздания файловой системы (левая)********************

   char id_left_df[2];
   id_left_df[0] = 0x00;
   id_left_df[1] = 0x00;
   char AC_left_df = 0x00;


   select(id_left_df[0],id_left_df[1]);
   if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
   {
   	printf("Создаем файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
   	create_df(id_left_df,AC_left_df);
   }
   else
   {
   	printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
   }

   select(id_left_df[0],id_left_df[1]);


   char id_left_ef[2];
   id_left_ef[0] = 0x00;
   id_left_ef[1] = 0x01;
   char size_left_ef[2];
   size_left_ef[0]=0x00;
   size_left_ef[1]=0x02;
   char AC_left_ef = 0x44;



   select(id_left_ef[0],id_left_ef[1]);

   if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
   {
      printf("Создаем файл EF id = 0x%02hhx 0x%02hhx \n",id_left_ef[0],id_left_ef[1]);
      create_ef(size_left_ef,id_left_ef,AC_left_ef,0x00);
      printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
      select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }
   else
   {
      printf("Файл  EF с id = 0x%02hhx 0x%02hhx существует \n",id_left_ef[0],id_left_ef[1]);
      printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
      select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }


   char id_left_ef_2[2];
   id_left_ef_2[0] = 0x00;
   id_left_ef_2[1] = 0x02;
   char size_left_ef_2[2];
   size_left_ef_2[0]=0x00;
   size_left_ef_2[1]=0x02;
   char AC_left_ef_2 = 0x44;



   select(id_left_ef_2[0],id_left_ef_2[1]);

   if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
   {
      printf("Создаем файл EF id = 0x%02hhx 0x%02hhx \n",id_left_ef_2[0],id_left_ef_2[1]);
      create_ef(size_left_ef_2,id_left_ef_2,AC_left_ef_2,0x00);
      printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
      select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }
   else
   {
      printf("Файл  EF с id = 0x%02hhx 0x%02hhx существует \n",id_left_ef_2[0],id_left_ef_2[1]);
      printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
      select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }



   char id_left_ef_3[2];
   id_left_ef_3[0] = 0x00;
   id_left_ef_3[1] = 0x02;
   char size_left_ef_3[2];
   size_left_ef_3[0]=0x00;
   size_left_ef_3[1]=0x02;
   char AC_left_ef_3 = 0x44;



   select(id_left_ef_3[0],id_left_ef_3[1]);

   if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
   {
      printf("Создаем файл EF id = 0x%02hhx 0x%02hhx \n",id_left_ef_3[0],id_left_ef_3[1]);
      create_ef(size_left_ef_3,id_left_ef_3,AC_left_ef_3,0x00);
      printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
      select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }
   else
   {
      printf("Файл  EF с id = 0x%02hhx 0x%02hhx существует \n",id_left_ef_3[0],id_left_ef_3[1]);
      printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
      select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }

   char AC_kf_14[4];
   AC_kf_14[0] = 0x33;
   AC_kf_14[1] = 0x0F;
   AC_kf_14[2] = 0xF3;
   AC_kf_14[3] = 0xFF;

   select(0xFF,0x014);
   if((cinterfacesmartcard.reciver_buffer[0] == 0x6A) && (cinterfacesmartcard.reciver_buffer[1] == 0x82))
   {
	   printf("Создаем файл KF id = 0xFF 0x14 \n");
	   create_kf(0x14,AC_kf_14,0x40,0x00);
	   printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id_left_df[0],id_left_df[1]);
	   select(id_left_df[0],id_left_df[1]);//переход обратно на DF 0x00 0x08
   }
   else
   {
	   printf("Файл  KF с id = 0xFF 0x11 существует \n");
	   printf("Перешли на файл DF id = 0x%02hhx 0x%02hhx \n",id[0],id[1]);
	   select(id[0],id[1]);//переход обратно на DF 0x00 0x08
    }


/*    serial_numer = read_serial_number();

    select(id[0],id[1]);
    select(0xFF,0x12);


    password[0] = 0x8E;
    	password[1] = 0xD5;
    	password[2] = 0xD6;
    	password[3] = 0x3D;
    	password[4] = 0xBB;
    	password[5] = 0xA2;
    	password[6] = 0x21;
    	password[7] = 0x36;

	   for(i=0; i < 8;i++)
	   {
	      printf("0x%02hhx\n",password[i]);
	   }


   verify(password,0);

    select(0xFF,0x10);

    diversify_key(serial_numer);
    save_div_key(0xFF,0x11);
*/



    /*
    //Создать MF файл с номером 3F 00 с доступом 01 (разкоментировать если нужно создать новую симку)
    //create_mf();
	*/

   // select(0x3F,0x00);// выбор MF файла с номером 3F 00 с доступом 01;




   // select(0xFF,0x13);
   // create_kf(0x13,AC_kf,0x20,0x00); // создаем KF в MF файле

   // char password[8];

    /*
    for( i=0 ; i < 8 ;i++)
    {
      password[i] = 0x10;
    }

   // load_key(password,0);

    verify(password,0);

    //select(0x3F,0x00);



   // create_df(id,AC_df);

    select(0x3F,0x00);

    select(0x00,0x02);





  //  create_ef(size_ef,id_ef,AC_ef,0x00);

  //  select(0x00,0x07);

   // update_binary(password,size_ef[1]);

  //  read_binary();


    /*
    // Я создал DF с номером 00 00 c доступом 00 после MF (разкоментировать если нужно создать новую симку)
    //create_df();
    */

 //   select(0x00,0x00); // выбор DF файла с номером 00 00 с доступом 01;


   // AC_kf[0] = 0x77;
  //  AC_kf[1] = 0x0F;
  //  AC_kf[2] = 0xF7;
  //  AC_kf[3] = 0xFF;

  //  create_kf(0x18,AC,0x40,0x00); // создаем KF в DF файле зашифрованным на MF


   // select(0x3F,0x00);
   // select(0xFF,0x17); // перешли на KF в MF



        //Загрузить в KF номер
 //   load_key(password); // загрузил


   // verify(0x10,0x10,0x10,0x10);


   // select(0x00,0x00); // выбор DF файла с номером 00 00 с доступом 01;

  //  select(0xFF,0x18);


   // for( i=0 ; i < 8 ;i++)
   // {
  //     password[i] = 0x11;
  //  }


  //  load_key(password,0); // загрузил

 //   verify(0x11,0x11,0x11,0x11);


   // delete(0x00,0x00);


    /*
    // создаем EF внутри DF с номером 00 00 с доступом 00 размером 00 10 (16 число)
  	 create_ef();
	*/
    //создаем EF внутри DF с номером 00 00 с доступом 00 размером 00 10 (16 число)


    //create_ef();

    //select(0xFF,0x12);

   // verify(0x10,0x10,0x10,0x10);


   // select(0x00,0x01);






  // char password2[8];

   //работает
   //update_binary(password2);


   //read_binary();



    /*
    // создаем KF внутри DF с номером FF 10 с  (разкоментировать если нужно создать новую симку)
    //b0)пароль
    //b1) ключ должен быть диверсифицирован перед внешней, взаимной или внутренней аутентификацией
    //b2)ключ может быть использован в режиме шифратора
    //b3)ключ может быть использован для односторонней аутентификации
    //b4)ключ может быть использован для взаимной аутентификации
    //b5)при использование ключа в режиме шифратора будет вырабатываться сеансовый ключ
    //b6)при использование ключа не будут включаться меры специальной защиты
    //b7)ключ не блокирован безвозвратно
     *
     * для созданного KF файла с такими параметрами нужен ключ длинной 0x24 (34 по документации) в load_key
     *
    create_kf();
	*/

    //создаем KF внутри DF с номером FF 11 с  (разкоментировать если нужно создать новую симку)
   // create_kf(0x11);

   // select(0xFF,0x11);
   // delete(0xFF,0x11);

    //создаем KF внутри DF с номером FF 12 с  (разкоментировать если нужно создать новую симку)
    //create_kf(0x12);



  // select(0xFF,0x12); // выбор KF файла с номером FF 11;


 //   char password[8];


 //  for( i=0 ; i < 8 ;i++)
 //  {
//	   password[i] = 0x10;
  // }

 // update_key(password);

     //Загрузить в KF номер
    // load_key(password); // загрузил


  // verify(0x10,0x10,0x10,0x10);

  // verify(0x11,0x11,0x11,0x11);



  // unlock_key();

   //verify(0x11,0x11,0x11,0x11);

   //unlock_key();


   //serial_numer = read_serial_number(serial_numer);

  // diversify_key(serial_numer);


  //  activate(0x00,0x00);

    //получаем номер симки;



 //   update_key(serial_numer);









 //  verify_tk(0x21,0x21,0x21,0x21);


  // update_key(serial_numer);

 //  unlock_key();


   // diversify_key(serial_numer);
    /*
    //работает ( но что то не так может с KF)

	*/



  // char* random =  get_challenge();

  // get_session_key(random);







 /////////////////////////////////////////////////////////////////
   // test_result();

  //  create_mf();



   // create_df();



   // select(0x3F,0x00);

   // select(0xFF,0x11);

   // test_result();

    //create_df();

    //verify_tk(0x21,0x21,0x21,0x21);

   // test_result();

  // diversify_key();

   // restore();

  //serial_numer = read_serial_number();


    //verify_tk(0x21,0x21,0x21,0x21);





//create_kf();

   // verify_tk(0x21,0x21,0x21,0x21);

   // write_tk_pl();

   // verify_tk(0x20,0x20,0x20,0x20);

  //     for(i = 0; i < 1024;i++)
    //     {
     //         cinterfacesmartcard.reciver_buffer[i] = 0;
     //     }

     //     for(i = 0; i < 1024;i++)
       //    {
      //        cinterfacesmartcard.transmit_buffer[i] = 0;
      //     }


       //   verify(0x21,0x21,0x21,0x21);

  //  get_challenge();
   // get_session_key();
   // get_response();

   //

  //  create_df();

    //select(0x77,0x77);

   //



      //get_challenge();









   // check_rom();
   // get_response();
   // restore();
    //select();
  //  create_mf();

   // verify_tk(0xab,0x49,0xb8,0xed);



    //verify_tk(0xab,0x49,0xb8,0xed);

 //   unsigned serial_numer2 = read_serial_number(serial_numer);




  // verify_tk(0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21);

 //  serial_numer=read_serial_number(serial_numer);

    //write_tk();


   // create_mf();
   // somo_test = test_result();

   // i =0;

    	//    for(i = 0; i < 1024;i++)
    	 //   {
    	   // 	cinterfacesmartcard.reciver_buffer[i] = 0;
    	   // }

    	   // for(i = 0; i < 1024;i++)
    	     //  	    {
    	      // 	    	cinterfacesmartcard.transmit_buffer[i] = 0;
    	       //	    }

    	   // unsigned lol =    test_fs();

    	  //  for(i = 0; i < 1024;i++)
    	 //   {
    	 //       cinterfacesmartcard.reciver_buffer[i] = 0;
    	 //   }

    	  //  unsigned    somo_test2 = test_result();

    	  //  for(i = 0; i < 1024;i++)
    	   //    	    {
    	   //    	    	cinterfacesmartcard.reciver_buffer[i] = 0;
    	    //   	    }

    	       	//    for(i = 0; i < 1024;i++)
    	       	 //      	    {
    	       	  //     	    	cinterfacesmartcard.transmit_buffer[i] = 0;
    	       	  //     	    }



    	       //	 select();
    	//    unlock_key();

  // verify_tk(0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21); //0xAB, 0x49, 0xB8, 0xFB, 0xAB, 0x49, 0xB8, 0xFB
   // write_tk();

 //  i =0;
//
       //	    for(i = 0; i < 1024;i++)
      // 	    {
       	 //   	cinterfacesmartcard.reciver_buffer[i] = 0;
       	 //   }

  // unsigned serial_numer2;

  // serial_numer2 = read_serial_number();





 //   write_tk_pl();



  //  serial_numer = read_serial_number();

 //   check_rom();



    /*
    somo_test = test_result();

    verify_tk(0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21);
    write_tk();
    write_tk_pl();
    */
   // check_rom();
    /*

    verify_tk(0xAB, 0x49, 0xB8, 0xFB, 0xAB, 0x49, 0xB8, 0xFB);
    write_tk();
   // verify_tk(0xAB, 0x49, 0xB8, 0xFB, 0xAB, 0x49, 0xB8, 0xFB);
    write_tk_pl();


    create_mf();

    unsigned random = get_challenge();

     printf("CardSelf TEst: \n");
       printf("%d\n",somo_test);
       printf("card serial num: \n");
      printf("%d\n",serial_numer);
	*/
  //  get_response();

   // serial_numer=read_serial_number(serial_numer);// считываение серийного номера смарт карты
    // somo_test=Test_Result(sim_number);// считывание состояния системы
      //verifyTK();
   // writeTK_ESPZU();
   // writeTK_ESPZU();
    //writeTK_PL();

   // writeTK_ESPZU();
   // get_Response();
   //
   // create_MF();
   //get_challenge();
  // read_serial_number(sim_number);
 //  check_rom(sim_number);
 //  internal_auth(sim_number);
//  create_kf(sim_number);
   //check_rom();

      //writeTK_ESPZU();
   // create_mf();

  //    read_serial_number();
  //  get_CHALLENGE();
   // printf("CardSelf TEst: \n");
  //  printf("%d\n",somo_test);
  //  printf("card serial num: \n");
  //  printf("%d\n",serial_numer);
    // деинициализация смарт карты

  //  while(1)
  //  {
  //  	a++;
  //  }
  //  cleanup_platform();
  return 0;
}
/*
int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr) //инициализация контроллера прерываний
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler) XScuGic_InterruptHandler,
	XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}


int ScuGicInterrupt_Init(u16 DeviceId,ProgSmartCart *pProgSmartCart) //функция инициализации прерывания № 61
{
	int Status;
	XScuGic_Config *GicConfig;
	GicConfig = XScuGic_LookupConfig(DeviceId);
	if (NULL == GicConfig) {
	return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig, GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}
	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}
	//---схема управления
	Status = XScuGic_Connect(&InterruptController,61,SetSmartCart,pProgSmartCart);
	if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
	XScuGic_Enable(&InterruptController, 61);

	Status = XScuGic_Connect(&InterruptController,62,DetectSmartCart,pProgSmartCart);
    if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
	XScuGic_Enable(&InterruptController, 62);


 	return XST_SUCCESS;


}
*/

