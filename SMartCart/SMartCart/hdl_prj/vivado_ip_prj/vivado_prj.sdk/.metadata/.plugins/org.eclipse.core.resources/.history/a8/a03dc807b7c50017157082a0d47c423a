/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "smartCard.h"

int main()
{
    init_platform();
    int a,status,i;
    char sim_number = 0;
    char* serial_numer;
    int somo_test,err;
    Ccomanda ccomanda;
    status=intcial(sim_number);//инициализация  начальных настроек смарт карты
    start(&ccomanda,&cinterfacesmartcard,sim_number);// инициализация смарт карты
    cinterfacesmartcard.ok =0;
    while(cinterfacesmartcard.ok==0){}// ожидание окончания инициализации
    cinterfacesmartcard.ok=0;

    // РАБОТАЕТ СИМКА !

    verify_tk(0x21,0x21,0x21,0x21);




   // delete(0xFF,0x10);

    /*
    //Создать MF файл с номером 3F 00 с доступом 01 (разкоментировать если нужно создать новую симку)
    //create_mf();
	*/

    select(0x3F,0x00);// выбор MF файла с номером 3F 00 с доступом 01;


    restore();


    /*
    // Я создал DF с номером 00 00 c доступом 00 после MF (разкоментировать если нужно создать новую симку)
    //create_df();
    */

    select(0x00,0x00); // выбор DF файла с номером 00 00 с доступом 01;

    /*
    // создаем EF внутри DF с номером 00 00 с доступом 00 размером 00 10 (16 число)
  	// create_ef();
	*/


    /*
    // создаем KF внутри DF с номером FF 10 с  (разкоментировать если нужно создать новую симку)
    //b0)пароль
    //b1) ключ должен быть диверсифицирован перед внешней, взаимной или внутренней аутентификацией
    //b2)ключ может быть использован в режиме шифратора
    //b3)ключ может быть использован для односторонней аутентификации
    //b4)ключ может быть использован для взаимной аутентификации
    //b5)при использование ключа в режиме шифратора будет вырабатываться сеансовый ключ
    //b6)при использование ключа не будут включаться меры специальной защиты
    //b7)ключ не блокирован безвозвратно
     *
     * для созданного KF файла с такими параметрами нужен ключ длинной 0x24 (34 по документации) в load_key
     *
    create_kf();
	*/




    select(0xFF,0x10); // выбор KF файла с номером FF 10;


    //получаем номер симки;
   serial_numer = read_serial_number(serial_numer);

    update_key(serial_numer);







    /*
    //Загрузить в KF номер
    //load_key(serial_numer); уже загружен
    */



    /*
    //работает ( но что то не так может с KF)
    //diversify_key(serial_numer);
	*/



  // char* random =  get_challenge();

  // get_session_key(random);







 /////////////////////////////////////////////////////////////////
   // test_result();

  //  create_mf();



   // create_df();



   // select(0x3F,0x00);

   // select(0xFF,0x11);

   // test_result();

    //create_df();

    //verify_tk(0x21,0x21,0x21,0x21);

   // test_result();

  // diversify_key();

   // restore();

  //serial_numer = read_serial_number();


    //verify_tk(0x21,0x21,0x21,0x21);





//create_kf();

   // verify_tk(0x21,0x21,0x21,0x21);

   // write_tk_pl();

   // verify_tk(0x20,0x20,0x20,0x20);

  //     for(i = 0; i < 1024;i++)
    //     {
     //         cinterfacesmartcard.reciver_buffer[i] = 0;
     //     }

     //     for(i = 0; i < 1024;i++)
       //    {
      //        cinterfacesmartcard.transmit_buffer[i] = 0;
      //     }


       //   verify(0x21,0x21,0x21,0x21);

  //  get_challenge();
   // get_session_key();
   // get_response();

   //

  //  create_df();

    //select(0x77,0x77);

   //



      //get_challenge();









   // check_rom();
   // get_response();
   // restore();
    //select();
  //  create_mf();

   // verify_tk(0xab,0x49,0xb8,0xed);



    //verify_tk(0xab,0x49,0xb8,0xed);

 //   unsigned serial_numer2 = read_serial_number(serial_numer);




  // verify_tk(0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21);

 //  serial_numer=read_serial_number(serial_numer);

    //write_tk();


   // create_mf();
   // somo_test = test_result();

   // i =0;

    	//    for(i = 0; i < 1024;i++)
    	 //   {
    	   // 	cinterfacesmartcard.reciver_buffer[i] = 0;
    	   // }

    	   // for(i = 0; i < 1024;i++)
    	     //  	    {
    	      // 	    	cinterfacesmartcard.transmit_buffer[i] = 0;
    	       //	    }

    	   // unsigned lol =    test_fs();

    	  //  for(i = 0; i < 1024;i++)
    	 //   {
    	 //       cinterfacesmartcard.reciver_buffer[i] = 0;
    	 //   }

    	  //  unsigned    somo_test2 = test_result();

    	  //  for(i = 0; i < 1024;i++)
    	   //    	    {
    	   //    	    	cinterfacesmartcard.reciver_buffer[i] = 0;
    	    //   	    }

    	       	//    for(i = 0; i < 1024;i++)
    	       	 //      	    {
    	       	  //     	    	cinterfacesmartcard.transmit_buffer[i] = 0;
    	       	  //     	    }



    	       //	 select();
    	//    unlock_key();

  // verify_tk(0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21); //0xAB, 0x49, 0xB8, 0xFB, 0xAB, 0x49, 0xB8, 0xFB
   // write_tk();

 //  i =0;
//
       //	    for(i = 0; i < 1024;i++)
      // 	    {
       	 //   	cinterfacesmartcard.reciver_buffer[i] = 0;
       	 //   }

  // unsigned serial_numer2;

  // serial_numer2 = read_serial_number();





 //   write_tk_pl();



  //  serial_numer = read_serial_number();

 //   check_rom();

    printf("CardSelf TEst: \n");
    printf("%d\n",somo_test);
    printf("card serial num: \n");
     printf("%d\n",serial_numer);

    /*
    somo_test = test_result();

    verify_tk(0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21);
    write_tk();
    write_tk_pl();
    */
   // check_rom();
    /*

    verify_tk(0xAB, 0x49, 0xB8, 0xFB, 0xAB, 0x49, 0xB8, 0xFB);
    write_tk();
   // verify_tk(0xAB, 0x49, 0xB8, 0xFB, 0xAB, 0x49, 0xB8, 0xFB);
    write_tk_pl();


    create_mf();

    unsigned random = get_challenge();

     printf("CardSelf TEst: \n");
       printf("%d\n",somo_test);
       printf("card serial num: \n");
      printf("%d\n",serial_numer);
	*/
  //  get_response();

   // serial_numer=read_serial_number(serial_numer);// считываение серийного номера смарт карты
    // somo_test=Test_Result(sim_number);// считывание состояния системы
      //verifyTK();
   // writeTK_ESPZU();
   // writeTK_ESPZU();
    //writeTK_PL();

   // writeTK_ESPZU();
   // get_Response();
   //
   // create_MF();
   //get_challenge();
  // read_serial_number(sim_number);
 //  check_rom(sim_number);
 //  internal_auth(sim_number);
//  create_kf(sim_number);
   //check_rom();

      //writeTK_ESPZU();
   // create_mf();

  //    read_serial_number();
  //  get_CHALLENGE();
   // printf("CardSelf TEst: \n");
  //  printf("%d\n",somo_test);
  //  printf("card serial num: \n");
  //  printf("%d\n",serial_numer);
    // деинициализация смарт карты

    while(1)
    {
    	a++;
    }
    cleanup_platform();
    return 0;
}
/*
int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr) //инициализация контроллера прерываний
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler) XScuGic_InterruptHandler,
	XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}


int ScuGicInterrupt_Init(u16 DeviceId,ProgSmartCart *pProgSmartCart) //функция инициализации прерывания № 61
{
	int Status;
	XScuGic_Config *GicConfig;
	GicConfig = XScuGic_LookupConfig(DeviceId);
	if (NULL == GicConfig) {
	return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig, GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}
	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
	return XST_FAILURE;
	}
	//---схема управления
	Status = XScuGic_Connect(&InterruptController,61,SetSmartCart,pProgSmartCart);
	if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
	XScuGic_Enable(&InterruptController, 61);

	Status = XScuGic_Connect(&InterruptController,62,DetectSmartCart,pProgSmartCart);
    if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
	XScuGic_Enable(&InterruptController, 62);


 	return XST_SUCCESS;


}
*/

