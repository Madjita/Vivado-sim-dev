-- -------------------------------------------------------------
-- 
-- File Name: D:\direct_ip\smart_ip\hdlsrc\smartCart5_1work\head_ip_addr_decoder.vhd
-- Created: 2017-11-16 10:43:29
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: head_ip_addr_decoder
-- Source Path: head_ip/head_ip_axi_lite/head_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY head_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_Out1                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out2                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out3                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out4                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out5                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out6                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out7                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_Out8                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_status                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_comanda                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_1                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_2                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_3                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_4                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_5                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_6                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_7                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_8                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_9                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_10                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_11                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_12                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_13                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_14                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_15                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_16                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_17                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_18                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_19                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_20                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_21                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_22                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_23                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_24                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_25                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_26                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_27                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_28                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_29                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_30                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_31                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_32                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_33                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_34                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_35                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_36                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_37                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_38                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_39                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_40                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_41                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_42                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_43                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_44                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_45                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_46                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_47                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_48                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_49                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_50                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_51                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_52                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_53                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_54                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_55                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_56                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_57                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_58                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_59                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_60                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_61                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_62                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_63                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_data_in_64                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Time_pause                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Time_reciv                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Time_transmit               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Time_interval               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_Time_transition             :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END head_ip_addr_decoder;


ARCHITECTURE rtl OF head_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_Out1                  : std_logic;  -- ufix1
  SIGNAL read_Out1_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_Out2_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out3_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out4_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out5_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out6_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out7_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_Out8_unsigned               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_status_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_status                : std_logic;  -- ufix1
  SIGNAL decode_sel_Out8                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out7                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out6                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out5                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out4                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out3                  : std_logic;  -- ufix1
  SIGNAL decode_sel_Out2                  : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out1                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out2                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out2                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out3                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out3                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out4                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out4                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out4                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out5                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out5                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out5                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out6                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out6                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out7                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out7                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out7                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_Out8                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_Out8                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out8                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_status                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_status                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_comanda               : std_logic;  -- ufix1
  SIGNAL reg_enb_comanda                  : std_logic;  -- ufix1
  SIGNAL write_reg_comanda                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_1             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_1                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_2             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_2                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_2              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_3             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_3                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_3              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_4             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_4                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_4              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_5             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_5                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_5              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_6             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_6                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_6              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_7             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_7                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_7              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_8             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_8                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_8              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_9             : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_9                : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_9              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_10            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_10               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_10             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_11            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_11               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_11             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_12            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_12               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_12             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_13            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_13               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_13             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_14            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_14               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_14             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_15            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_15               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_15             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_16            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_16               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_16             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_17            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_17               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_17             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_18            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_18               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_18             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_19            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_19               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_19             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_20            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_20               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_20             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_21            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_21               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_21             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_22            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_22               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_22             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_23            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_23               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_23             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_24            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_24               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_24             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_25            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_25               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_25             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_26            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_26               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_26             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_27            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_27               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_27             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_28            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_28               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_28             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_29            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_29               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_29             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_30            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_30               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_30             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_31            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_31               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_31             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_32            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_32               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_32             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_33            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_33               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_33             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_34            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_34               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_34             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_35            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_35               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_35             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_36            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_36               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_36             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_37            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_37               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_37             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_38            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_38               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_38             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_39            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_39               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_39             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_40            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_40               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_40             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_41            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_41               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_41             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_42            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_42               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_42             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_43            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_43               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_43             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_44            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_44               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_44             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_45            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_45               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_45             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_46            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_46               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_46             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_47            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_47               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_47             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_48            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_48               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_48             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_49            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_49               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_49             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_50            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_50               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_50             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_51            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_51               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_51             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_52            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_52               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_52             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_53            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_53               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_53             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_54            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_54               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_54             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_55            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_55               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_55             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_56            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_56               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_56             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_57            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_57               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_57             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_58            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_58               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_58             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_59            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_59               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_59             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_60            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_60               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_60             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_61            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_61               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_61             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_62            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_62               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_62             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_63            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_63               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_63             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_data_in_64            : std_logic;  -- ufix1
  SIGNAL reg_enb_data_in_64               : std_logic;  -- ufix1
  SIGNAL write_reg_data_in_64             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Time_pause            : std_logic;  -- ufix1
  SIGNAL reg_enb_Time_pause               : std_logic;  -- ufix1
  SIGNAL write_reg_Time_pause             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Time_reciv            : std_logic;  -- ufix1
  SIGNAL reg_enb_Time_reciv               : std_logic;  -- ufix1
  SIGNAL write_reg_Time_reciv             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Time_transmit         : std_logic;  -- ufix1
  SIGNAL reg_enb_Time_transmit            : std_logic;  -- ufix1
  SIGNAL write_reg_Time_transmit          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Time_interval         : std_logic;  -- ufix1
  SIGNAL reg_enb_Time_interval            : std_logic;  -- ufix1
  SIGNAL write_reg_Time_interval          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Time_transition       : std_logic;  -- ufix1
  SIGNAL reg_enb_Time_transition          : std_logic;  -- ufix1
  SIGNAL write_reg_Time_transition        : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_Out1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0086#, 14) ELSE
      '0';

  read_Out1_unsigned <= unsigned(read_Out1);

  const_1 <= '1';

  enb <= const_1;

  read_Out2_unsigned <= unsigned(read_Out2);

  read_Out3_unsigned <= unsigned(read_Out3);

  read_Out4_unsigned <= unsigned(read_Out4);

  read_Out5_unsigned <= unsigned(read_Out5);

  read_Out6_unsigned <= unsigned(read_Out6);

  read_Out7_unsigned <= unsigned(read_Out7);

  read_Out8_unsigned <= unsigned(read_Out8);

  read_status_unsigned <= unsigned(read_status);

  
  decode_sel_status <= '1' WHEN addr_sel_unsigned = to_unsigned(16#008E#, 14) ELSE
      '0';

  
  decode_sel_Out8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#008D#, 14) ELSE
      '0';

  
  decode_sel_Out7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#008C#, 14) ELSE
      '0';

  
  decode_sel_Out6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#008B#, 14) ELSE
      '0';

  
  decode_sel_Out5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#008A#, 14) ELSE
      '0';

  
  decode_sel_Out4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0089#, 14) ELSE
      '0';

  
  decode_sel_Out3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0088#, 14) ELSE
      '0';

  
  decode_sel_Out2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0087#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_Out1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out1 <= read_Out1_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out1_process;


  data_in_Out1 <= resize(read_reg_Out1, 32);

  
  decode_rd_Out1 <= const_0 WHEN decode_sel_Out1 = '0' ELSE
      data_in_Out1;

  reg_Out2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out2 <= read_Out2_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out2_process;


  data_in_Out2 <= resize(read_reg_Out2, 32);

  
  decode_rd_Out2 <= decode_rd_Out1 WHEN decode_sel_Out2 = '0' ELSE
      data_in_Out2;

  reg_Out3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out3 <= read_Out3_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out3_process;


  data_in_Out3 <= resize(read_reg_Out3, 32);

  
  decode_rd_Out3 <= decode_rd_Out2 WHEN decode_sel_Out3 = '0' ELSE
      data_in_Out3;

  reg_Out4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out4 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out4 <= read_Out4_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out4_process;


  data_in_Out4 <= resize(read_reg_Out4, 32);

  
  decode_rd_Out4 <= decode_rd_Out3 WHEN decode_sel_Out4 = '0' ELSE
      data_in_Out4;

  reg_Out5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out5 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out5 <= read_Out5_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out5_process;


  data_in_Out5 <= resize(read_reg_Out5, 32);

  
  decode_rd_Out5 <= decode_rd_Out4 WHEN decode_sel_Out5 = '0' ELSE
      data_in_Out5;

  reg_Out6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out6 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out6 <= read_Out6_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out6_process;


  data_in_Out6 <= resize(read_reg_Out6, 32);

  
  decode_rd_Out6 <= decode_rd_Out5 WHEN decode_sel_Out6 = '0' ELSE
      data_in_Out6;

  reg_Out7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out7 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out7 <= read_Out7_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out7_process;


  data_in_Out7 <= resize(read_reg_Out7, 32);

  
  decode_rd_Out7 <= decode_rd_Out6 WHEN decode_sel_Out7 = '0' ELSE
      data_in_Out7;

  reg_Out8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_Out8 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_Out8 <= read_Out8_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out8_process;


  data_in_Out8 <= resize(read_reg_Out8, 32);

  
  decode_rd_Out8 <= decode_rd_Out7 WHEN decode_sel_Out8 = '0' ELSE
      data_in_Out8;

  reg_status_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_status <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_status <= read_status_unsigned;
      END IF;
    END IF;
  END PROCESS reg_status_process;


  
  decode_rd_status <= decode_rd_Out8 WHEN decode_sel_status = '0' ELSE
      read_reg_status;

  data_read <= std_logic_vector(decode_rd_status);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_comanda <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_comanda <= decode_sel_comanda AND wr_enb;

  reg_comanda_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_comanda <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_comanda = '1' THEN
        write_reg_comanda <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_comanda_process;


  write_comanda <= std_logic_vector(write_reg_comanda);

  
  decode_sel_data_in_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_data_in_1 <= decode_sel_data_in_1 AND wr_enb;

  reg_data_in_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_1 = '1' THEN
        write_reg_data_in_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_1_process;


  write_data_in_1 <= std_logic_vector(write_reg_data_in_1);

  
  decode_sel_data_in_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_data_in_2 <= decode_sel_data_in_2 AND wr_enb;

  reg_data_in_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_2 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_2 = '1' THEN
        write_reg_data_in_2 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_2_process;


  write_data_in_2 <= std_logic_vector(write_reg_data_in_2);

  
  decode_sel_data_in_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_data_in_3 <= decode_sel_data_in_3 AND wr_enb;

  reg_data_in_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_3 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_3 = '1' THEN
        write_reg_data_in_3 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_3_process;


  write_data_in_3 <= std_logic_vector(write_reg_data_in_3);

  
  decode_sel_data_in_4 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_enb_data_in_4 <= decode_sel_data_in_4 AND wr_enb;

  reg_data_in_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_4 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_4 = '1' THEN
        write_reg_data_in_4 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_4_process;


  write_data_in_4 <= std_logic_vector(write_reg_data_in_4);

  
  decode_sel_data_in_5 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  reg_enb_data_in_5 <= decode_sel_data_in_5 AND wr_enb;

  reg_data_in_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_5 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_5 = '1' THEN
        write_reg_data_in_5 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_5_process;


  write_data_in_5 <= std_logic_vector(write_reg_data_in_5);

  
  decode_sel_data_in_6 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_enb_data_in_6 <= decode_sel_data_in_6 AND wr_enb;

  reg_data_in_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_6 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_6 = '1' THEN
        write_reg_data_in_6 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_6_process;


  write_data_in_6 <= std_logic_vector(write_reg_data_in_6);

  
  decode_sel_data_in_7 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_enb_data_in_7 <= decode_sel_data_in_7 AND wr_enb;

  reg_data_in_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_7 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_7 = '1' THEN
        write_reg_data_in_7 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_7_process;


  write_data_in_7 <= std_logic_vector(write_reg_data_in_7);

  
  decode_sel_data_in_8 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_enb_data_in_8 <= decode_sel_data_in_8 AND wr_enb;

  reg_data_in_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_8 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_8 = '1' THEN
        write_reg_data_in_8 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_8_process;


  write_data_in_8 <= std_logic_vector(write_reg_data_in_8);

  
  decode_sel_data_in_9 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_enb_data_in_9 <= decode_sel_data_in_9 AND wr_enb;

  reg_data_in_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_9 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_9 = '1' THEN
        write_reg_data_in_9 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_9_process;


  write_data_in_9 <= std_logic_vector(write_reg_data_in_9);

  
  decode_sel_data_in_10 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_enb_data_in_10 <= decode_sel_data_in_10 AND wr_enb;

  reg_data_in_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_10 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_10 = '1' THEN
        write_reg_data_in_10 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_10_process;


  write_data_in_10 <= std_logic_vector(write_reg_data_in_10);

  
  decode_sel_data_in_11 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  reg_enb_data_in_11 <= decode_sel_data_in_11 AND wr_enb;

  reg_data_in_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_11 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_11 = '1' THEN
        write_reg_data_in_11 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_11_process;


  write_data_in_11 <= std_logic_vector(write_reg_data_in_11);

  
  decode_sel_data_in_12 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_enb_data_in_12 <= decode_sel_data_in_12 AND wr_enb;

  reg_data_in_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_12 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_12 = '1' THEN
        write_reg_data_in_12 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_12_process;


  write_data_in_12 <= std_logic_vector(write_reg_data_in_12);

  
  decode_sel_data_in_13 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004D#, 14) ELSE
      '0';

  reg_enb_data_in_13 <= decode_sel_data_in_13 AND wr_enb;

  reg_data_in_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_13 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_13 = '1' THEN
        write_reg_data_in_13 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_13_process;


  write_data_in_13 <= std_logic_vector(write_reg_data_in_13);

  
  decode_sel_data_in_14 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004E#, 14) ELSE
      '0';

  reg_enb_data_in_14 <= decode_sel_data_in_14 AND wr_enb;

  reg_data_in_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_14 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_14 = '1' THEN
        write_reg_data_in_14 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_14_process;


  write_data_in_14 <= std_logic_vector(write_reg_data_in_14);

  
  decode_sel_data_in_15 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004F#, 14) ELSE
      '0';

  reg_enb_data_in_15 <= decode_sel_data_in_15 AND wr_enb;

  reg_data_in_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_15 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_15 = '1' THEN
        write_reg_data_in_15 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_15_process;


  write_data_in_15 <= std_logic_vector(write_reg_data_in_15);

  
  decode_sel_data_in_16 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  reg_enb_data_in_16 <= decode_sel_data_in_16 AND wr_enb;

  reg_data_in_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_16 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_16 = '1' THEN
        write_reg_data_in_16 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_16_process;


  write_data_in_16 <= std_logic_vector(write_reg_data_in_16);

  
  decode_sel_data_in_17 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0051#, 14) ELSE
      '0';

  reg_enb_data_in_17 <= decode_sel_data_in_17 AND wr_enb;

  reg_data_in_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_17 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_17 = '1' THEN
        write_reg_data_in_17 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_17_process;


  write_data_in_17 <= std_logic_vector(write_reg_data_in_17);

  
  decode_sel_data_in_18 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0052#, 14) ELSE
      '0';

  reg_enb_data_in_18 <= decode_sel_data_in_18 AND wr_enb;

  reg_data_in_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_18 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_18 = '1' THEN
        write_reg_data_in_18 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_18_process;


  write_data_in_18 <= std_logic_vector(write_reg_data_in_18);

  
  decode_sel_data_in_19 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0053#, 14) ELSE
      '0';

  reg_enb_data_in_19 <= decode_sel_data_in_19 AND wr_enb;

  reg_data_in_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_19 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_19 = '1' THEN
        write_reg_data_in_19 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_19_process;


  write_data_in_19 <= std_logic_vector(write_reg_data_in_19);

  
  decode_sel_data_in_20 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0054#, 14) ELSE
      '0';

  reg_enb_data_in_20 <= decode_sel_data_in_20 AND wr_enb;

  reg_data_in_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_20 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_20 = '1' THEN
        write_reg_data_in_20 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_20_process;


  write_data_in_20 <= std_logic_vector(write_reg_data_in_20);

  
  decode_sel_data_in_21 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0055#, 14) ELSE
      '0';

  reg_enb_data_in_21 <= decode_sel_data_in_21 AND wr_enb;

  reg_data_in_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_21 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_21 = '1' THEN
        write_reg_data_in_21 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_21_process;


  write_data_in_21 <= std_logic_vector(write_reg_data_in_21);

  
  decode_sel_data_in_22 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0056#, 14) ELSE
      '0';

  reg_enb_data_in_22 <= decode_sel_data_in_22 AND wr_enb;

  reg_data_in_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_22 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_22 = '1' THEN
        write_reg_data_in_22 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_22_process;


  write_data_in_22 <= std_logic_vector(write_reg_data_in_22);

  
  decode_sel_data_in_23 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0057#, 14) ELSE
      '0';

  reg_enb_data_in_23 <= decode_sel_data_in_23 AND wr_enb;

  reg_data_in_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_23 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_23 = '1' THEN
        write_reg_data_in_23 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_23_process;


  write_data_in_23 <= std_logic_vector(write_reg_data_in_23);

  
  decode_sel_data_in_24 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0058#, 14) ELSE
      '0';

  reg_enb_data_in_24 <= decode_sel_data_in_24 AND wr_enb;

  reg_data_in_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_24 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_24 = '1' THEN
        write_reg_data_in_24 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_24_process;


  write_data_in_24 <= std_logic_vector(write_reg_data_in_24);

  
  decode_sel_data_in_25 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0059#, 14) ELSE
      '0';

  reg_enb_data_in_25 <= decode_sel_data_in_25 AND wr_enb;

  reg_data_in_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_25 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_25 = '1' THEN
        write_reg_data_in_25 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_25_process;


  write_data_in_25 <= std_logic_vector(write_reg_data_in_25);

  
  decode_sel_data_in_26 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005A#, 14) ELSE
      '0';

  reg_enb_data_in_26 <= decode_sel_data_in_26 AND wr_enb;

  reg_data_in_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_26 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_26 = '1' THEN
        write_reg_data_in_26 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_26_process;


  write_data_in_26 <= std_logic_vector(write_reg_data_in_26);

  
  decode_sel_data_in_27 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005B#, 14) ELSE
      '0';

  reg_enb_data_in_27 <= decode_sel_data_in_27 AND wr_enb;

  reg_data_in_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_27 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_27 = '1' THEN
        write_reg_data_in_27 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_27_process;


  write_data_in_27 <= std_logic_vector(write_reg_data_in_27);

  
  decode_sel_data_in_28 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005C#, 14) ELSE
      '0';

  reg_enb_data_in_28 <= decode_sel_data_in_28 AND wr_enb;

  reg_data_in_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_28 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_28 = '1' THEN
        write_reg_data_in_28 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_28_process;


  write_data_in_28 <= std_logic_vector(write_reg_data_in_28);

  
  decode_sel_data_in_29 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005D#, 14) ELSE
      '0';

  reg_enb_data_in_29 <= decode_sel_data_in_29 AND wr_enb;

  reg_data_in_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_29 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_29 = '1' THEN
        write_reg_data_in_29 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_29_process;


  write_data_in_29 <= std_logic_vector(write_reg_data_in_29);

  
  decode_sel_data_in_30 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005E#, 14) ELSE
      '0';

  reg_enb_data_in_30 <= decode_sel_data_in_30 AND wr_enb;

  reg_data_in_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_30 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_30 = '1' THEN
        write_reg_data_in_30 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_30_process;


  write_data_in_30 <= std_logic_vector(write_reg_data_in_30);

  
  decode_sel_data_in_31 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#005F#, 14) ELSE
      '0';

  reg_enb_data_in_31 <= decode_sel_data_in_31 AND wr_enb;

  reg_data_in_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_31 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_31 = '1' THEN
        write_reg_data_in_31 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_31_process;


  write_data_in_31 <= std_logic_vector(write_reg_data_in_31);

  
  decode_sel_data_in_32 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0060#, 14) ELSE
      '0';

  reg_enb_data_in_32 <= decode_sel_data_in_32 AND wr_enb;

  reg_data_in_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_32 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_32 = '1' THEN
        write_reg_data_in_32 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_32_process;


  write_data_in_32 <= std_logic_vector(write_reg_data_in_32);

  
  decode_sel_data_in_33 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0061#, 14) ELSE
      '0';

  reg_enb_data_in_33 <= decode_sel_data_in_33 AND wr_enb;

  reg_data_in_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_33 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_33 = '1' THEN
        write_reg_data_in_33 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_33_process;


  write_data_in_33 <= std_logic_vector(write_reg_data_in_33);

  
  decode_sel_data_in_34 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0062#, 14) ELSE
      '0';

  reg_enb_data_in_34 <= decode_sel_data_in_34 AND wr_enb;

  reg_data_in_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_34 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_34 = '1' THEN
        write_reg_data_in_34 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_34_process;


  write_data_in_34 <= std_logic_vector(write_reg_data_in_34);

  
  decode_sel_data_in_35 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0063#, 14) ELSE
      '0';

  reg_enb_data_in_35 <= decode_sel_data_in_35 AND wr_enb;

  reg_data_in_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_35 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_35 = '1' THEN
        write_reg_data_in_35 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_35_process;


  write_data_in_35 <= std_logic_vector(write_reg_data_in_35);

  
  decode_sel_data_in_36 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0064#, 14) ELSE
      '0';

  reg_enb_data_in_36 <= decode_sel_data_in_36 AND wr_enb;

  reg_data_in_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_36 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_36 = '1' THEN
        write_reg_data_in_36 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_36_process;


  write_data_in_36 <= std_logic_vector(write_reg_data_in_36);

  
  decode_sel_data_in_37 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0065#, 14) ELSE
      '0';

  reg_enb_data_in_37 <= decode_sel_data_in_37 AND wr_enb;

  reg_data_in_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_37 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_37 = '1' THEN
        write_reg_data_in_37 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_37_process;


  write_data_in_37 <= std_logic_vector(write_reg_data_in_37);

  
  decode_sel_data_in_38 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0066#, 14) ELSE
      '0';

  reg_enb_data_in_38 <= decode_sel_data_in_38 AND wr_enb;

  reg_data_in_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_38 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_38 = '1' THEN
        write_reg_data_in_38 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_38_process;


  write_data_in_38 <= std_logic_vector(write_reg_data_in_38);

  
  decode_sel_data_in_39 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0067#, 14) ELSE
      '0';

  reg_enb_data_in_39 <= decode_sel_data_in_39 AND wr_enb;

  reg_data_in_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_39 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_39 = '1' THEN
        write_reg_data_in_39 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_39_process;


  write_data_in_39 <= std_logic_vector(write_reg_data_in_39);

  
  decode_sel_data_in_40 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0068#, 14) ELSE
      '0';

  reg_enb_data_in_40 <= decode_sel_data_in_40 AND wr_enb;

  reg_data_in_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_40 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_40 = '1' THEN
        write_reg_data_in_40 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_40_process;


  write_data_in_40 <= std_logic_vector(write_reg_data_in_40);

  
  decode_sel_data_in_41 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0069#, 14) ELSE
      '0';

  reg_enb_data_in_41 <= decode_sel_data_in_41 AND wr_enb;

  reg_data_in_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_41 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_41 = '1' THEN
        write_reg_data_in_41 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_41_process;


  write_data_in_41 <= std_logic_vector(write_reg_data_in_41);

  
  decode_sel_data_in_42 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006A#, 14) ELSE
      '0';

  reg_enb_data_in_42 <= decode_sel_data_in_42 AND wr_enb;

  reg_data_in_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_42 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_42 = '1' THEN
        write_reg_data_in_42 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_42_process;


  write_data_in_42 <= std_logic_vector(write_reg_data_in_42);

  
  decode_sel_data_in_43 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006B#, 14) ELSE
      '0';

  reg_enb_data_in_43 <= decode_sel_data_in_43 AND wr_enb;

  reg_data_in_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_43 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_43 = '1' THEN
        write_reg_data_in_43 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_43_process;


  write_data_in_43 <= std_logic_vector(write_reg_data_in_43);

  
  decode_sel_data_in_44 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006C#, 14) ELSE
      '0';

  reg_enb_data_in_44 <= decode_sel_data_in_44 AND wr_enb;

  reg_data_in_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_44 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_44 = '1' THEN
        write_reg_data_in_44 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_44_process;


  write_data_in_44 <= std_logic_vector(write_reg_data_in_44);

  
  decode_sel_data_in_45 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006D#, 14) ELSE
      '0';

  reg_enb_data_in_45 <= decode_sel_data_in_45 AND wr_enb;

  reg_data_in_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_45 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_45 = '1' THEN
        write_reg_data_in_45 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_45_process;


  write_data_in_45 <= std_logic_vector(write_reg_data_in_45);

  
  decode_sel_data_in_46 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006E#, 14) ELSE
      '0';

  reg_enb_data_in_46 <= decode_sel_data_in_46 AND wr_enb;

  reg_data_in_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_46 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_46 = '1' THEN
        write_reg_data_in_46 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_46_process;


  write_data_in_46 <= std_logic_vector(write_reg_data_in_46);

  
  decode_sel_data_in_47 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#006F#, 14) ELSE
      '0';

  reg_enb_data_in_47 <= decode_sel_data_in_47 AND wr_enb;

  reg_data_in_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_47 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_47 = '1' THEN
        write_reg_data_in_47 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_47_process;


  write_data_in_47 <= std_logic_vector(write_reg_data_in_47);

  
  decode_sel_data_in_48 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0070#, 14) ELSE
      '0';

  reg_enb_data_in_48 <= decode_sel_data_in_48 AND wr_enb;

  reg_data_in_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_48 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_48 = '1' THEN
        write_reg_data_in_48 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_48_process;


  write_data_in_48 <= std_logic_vector(write_reg_data_in_48);

  
  decode_sel_data_in_49 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0071#, 14) ELSE
      '0';

  reg_enb_data_in_49 <= decode_sel_data_in_49 AND wr_enb;

  reg_data_in_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_49 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_49 = '1' THEN
        write_reg_data_in_49 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_49_process;


  write_data_in_49 <= std_logic_vector(write_reg_data_in_49);

  
  decode_sel_data_in_50 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0072#, 14) ELSE
      '0';

  reg_enb_data_in_50 <= decode_sel_data_in_50 AND wr_enb;

  reg_data_in_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_50 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_50 = '1' THEN
        write_reg_data_in_50 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_50_process;


  write_data_in_50 <= std_logic_vector(write_reg_data_in_50);

  
  decode_sel_data_in_51 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0073#, 14) ELSE
      '0';

  reg_enb_data_in_51 <= decode_sel_data_in_51 AND wr_enb;

  reg_data_in_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_51 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_51 = '1' THEN
        write_reg_data_in_51 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_51_process;


  write_data_in_51 <= std_logic_vector(write_reg_data_in_51);

  
  decode_sel_data_in_52 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0074#, 14) ELSE
      '0';

  reg_enb_data_in_52 <= decode_sel_data_in_52 AND wr_enb;

  reg_data_in_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_52 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_52 = '1' THEN
        write_reg_data_in_52 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_52_process;


  write_data_in_52 <= std_logic_vector(write_reg_data_in_52);

  
  decode_sel_data_in_53 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0075#, 14) ELSE
      '0';

  reg_enb_data_in_53 <= decode_sel_data_in_53 AND wr_enb;

  reg_data_in_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_53 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_53 = '1' THEN
        write_reg_data_in_53 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_53_process;


  write_data_in_53 <= std_logic_vector(write_reg_data_in_53);

  
  decode_sel_data_in_54 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0076#, 14) ELSE
      '0';

  reg_enb_data_in_54 <= decode_sel_data_in_54 AND wr_enb;

  reg_data_in_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_54 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_54 = '1' THEN
        write_reg_data_in_54 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_54_process;


  write_data_in_54 <= std_logic_vector(write_reg_data_in_54);

  
  decode_sel_data_in_55 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0077#, 14) ELSE
      '0';

  reg_enb_data_in_55 <= decode_sel_data_in_55 AND wr_enb;

  reg_data_in_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_55 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_55 = '1' THEN
        write_reg_data_in_55 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_55_process;


  write_data_in_55 <= std_logic_vector(write_reg_data_in_55);

  
  decode_sel_data_in_56 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0078#, 14) ELSE
      '0';

  reg_enb_data_in_56 <= decode_sel_data_in_56 AND wr_enb;

  reg_data_in_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_56 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_56 = '1' THEN
        write_reg_data_in_56 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_56_process;


  write_data_in_56 <= std_logic_vector(write_reg_data_in_56);

  
  decode_sel_data_in_57 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0079#, 14) ELSE
      '0';

  reg_enb_data_in_57 <= decode_sel_data_in_57 AND wr_enb;

  reg_data_in_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_57 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_57 = '1' THEN
        write_reg_data_in_57 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_57_process;


  write_data_in_57 <= std_logic_vector(write_reg_data_in_57);

  
  decode_sel_data_in_58 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#007A#, 14) ELSE
      '0';

  reg_enb_data_in_58 <= decode_sel_data_in_58 AND wr_enb;

  reg_data_in_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_58 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_58 = '1' THEN
        write_reg_data_in_58 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_58_process;


  write_data_in_58 <= std_logic_vector(write_reg_data_in_58);

  
  decode_sel_data_in_59 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#007B#, 14) ELSE
      '0';

  reg_enb_data_in_59 <= decode_sel_data_in_59 AND wr_enb;

  reg_data_in_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_59 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_59 = '1' THEN
        write_reg_data_in_59 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_59_process;


  write_data_in_59 <= std_logic_vector(write_reg_data_in_59);

  
  decode_sel_data_in_60 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#007C#, 14) ELSE
      '0';

  reg_enb_data_in_60 <= decode_sel_data_in_60 AND wr_enb;

  reg_data_in_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_60 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_60 = '1' THEN
        write_reg_data_in_60 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_60_process;


  write_data_in_60 <= std_logic_vector(write_reg_data_in_60);

  
  decode_sel_data_in_61 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#007D#, 14) ELSE
      '0';

  reg_enb_data_in_61 <= decode_sel_data_in_61 AND wr_enb;

  reg_data_in_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_61 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_61 = '1' THEN
        write_reg_data_in_61 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_61_process;


  write_data_in_61 <= std_logic_vector(write_reg_data_in_61);

  
  decode_sel_data_in_62 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#007E#, 14) ELSE
      '0';

  reg_enb_data_in_62 <= decode_sel_data_in_62 AND wr_enb;

  reg_data_in_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_62 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_62 = '1' THEN
        write_reg_data_in_62 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_62_process;


  write_data_in_62 <= std_logic_vector(write_reg_data_in_62);

  
  decode_sel_data_in_63 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#007F#, 14) ELSE
      '0';

  reg_enb_data_in_63 <= decode_sel_data_in_63 AND wr_enb;

  reg_data_in_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_63 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_63 = '1' THEN
        write_reg_data_in_63 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_63_process;


  write_data_in_63 <= std_logic_vector(write_reg_data_in_63);

  
  decode_sel_data_in_64 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  reg_enb_data_in_64 <= decode_sel_data_in_64 AND wr_enb;

  reg_data_in_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_data_in_64 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_in_64 = '1' THEN
        write_reg_data_in_64 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_data_in_64_process;


  write_data_in_64 <= std_logic_vector(write_reg_data_in_64);

  
  decode_sel_Time_pause <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0081#, 14) ELSE
      '0';

  reg_enb_Time_pause <= decode_sel_Time_pause AND wr_enb;

  reg_Time_pause_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Time_pause <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Time_pause = '1' THEN
        write_reg_Time_pause <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Time_pause_process;


  write_Time_pause <= std_logic_vector(write_reg_Time_pause);

  
  decode_sel_Time_reciv <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0082#, 14) ELSE
      '0';

  reg_enb_Time_reciv <= decode_sel_Time_reciv AND wr_enb;

  reg_Time_reciv_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Time_reciv <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Time_reciv = '1' THEN
        write_reg_Time_reciv <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Time_reciv_process;


  write_Time_reciv <= std_logic_vector(write_reg_Time_reciv);

  
  decode_sel_Time_transmit <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0083#, 14) ELSE
      '0';

  reg_enb_Time_transmit <= decode_sel_Time_transmit AND wr_enb;

  reg_Time_transmit_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Time_transmit <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Time_transmit = '1' THEN
        write_reg_Time_transmit <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Time_transmit_process;


  write_Time_transmit <= std_logic_vector(write_reg_Time_transmit);

  
  decode_sel_Time_interval <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0084#, 14) ELSE
      '0';

  reg_enb_Time_interval <= decode_sel_Time_interval AND wr_enb;

  reg_Time_interval_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Time_interval <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Time_interval = '1' THEN
        write_reg_Time_interval <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Time_interval_process;


  write_Time_interval <= std_logic_vector(write_reg_Time_interval);

  
  decode_sel_Time_transition <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0085#, 14) ELSE
      '0';

  reg_enb_Time_transition <= decode_sel_Time_transition AND wr_enb;

  reg_Time_transition_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Time_transition <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Time_transition = '1' THEN
        write_reg_Time_transition <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Time_transition_process;


  write_Time_transition <= std_logic_vector(write_reg_Time_transition);

END rtl;

